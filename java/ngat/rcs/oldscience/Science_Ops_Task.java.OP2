/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.science;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.tocs.*;
import ngat.rcs.calib.*;


import ngat.net.*;
import ngat.util.*;
import ngat.phase2.*;
import ngat.instrument.*;
import ngat.phase2.nonpersist.*;
import ngat.astrometry.*;
import ngat.util.logging.*;
import ngat.message.RCS_TCS.*;

import java.io.*;
import java.util.*;
import java.awt.Color;
import java.rmi.*;

/** This Task creates a series of subTasks to carry out the
 * Science Operations plan .
 *
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: Science_Ops_Task.java,v 1.2 2007/01/05 14:58:08 snf Exp $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/science/RCS/Science_Ops_Task.java,v $
 * </dl>
 * @author $Author: snf $
 * @version $Revision: 1.2 $
 */
public class Science_Ops_Task extends DefaultModalTask implements Logging {
    
    public static final String CLASS = "ScienceMCA";
    
    public static final String DEFAULT_SCHEDULE_MODE = "OPTIMAL";

    /** Default maximum length for a group (msec).*/
    public static final long DEFAULT_MAX_GROUP_LENGTH = 4*3600*1000L;
    
    /** Default delay of start of Science Operations after sunset (mins).*/
    public static final int DEFAULT_START_DELAY = 60;
    
    /** Default maximum seeing for science ops.*/
    public double DEFAULT_MAX_SEEING = 500.0;
    // changed from 5.0 snf -5apr06 due to ratcam knackered

    protected static Science_Ops_Task instance;

    /** Implements the lockfile associated with the group instantiation counter.*/
    PersistentUniqueInteger puid;

    /** Counts the number of groups so far since start of observing.
     * This number is maintained over reboots during the night.
     */
    protected int groupCounter;

    /** Will become deprecated.*/
    protected String scheduleMode;

    /** Time after sunset before we allow SCA operations. (minutes).*/
    protected int startDelay;

    /** Maximum length of an observation/group sequence (msec).*/
    protected long maxGroupLength;

    /** End of a period until which we will refuse control - e.g. no groups visible at present.*/
    protected long  sleepPeriodEnd;

    /** How long we sleep if no targets visible.*/
    protected long sleepPeriod;

    /** Counts the number of Group_Sequences so far (this session).*/
    protected int groupSequenceCount;

    /** Stores obsdate.*/
    protected ObsDate obsDate;

    /** Flag to indicate whether this is the SCA has just been fired up.*/
    protected volatile boolean firstJob = false;

    /** True if doing auto-start.*/
    protected boolean doAutoStartup;

    /** Maximumseeing in which we consider doing science (as).*/
    protected double maxSeeing;

    /** Create a Science_Ops_Task using the supplied settings.
     * @param name The unique name/id for this TaskImpl - 
     * should be based on the COMMAND_ID.
     * @param manager The Task's manager.
     */
    public Science_Ops_Task(String      name,
			    TaskManager manager) {
	super(name, manager);
	groupSequenceCount = 0;
	obsDate  = RCS_Controller.getObsDate(); 
    }
    
    /** Initializes the single instance of the ScienceControlAgent.*/
    public void initialize(ModalTask mt) {
	instance = (Science_Ops_Task)mt;	
    }
   
    /** Returns a reference to the singleton instance.*/
    public static ModalTask getInstance() {
	return instance;
    }
    
    /** Configure from File. Does nothing at present - will be used to:-
     * choose the Scheduling model, set any special operational constraints etc etc
     *
     *
     * 
     * @param file Configuration file.
     * @exception IOException If any problem occurs reading the file or does not exist.
     * @exception IllegalArgumentException If any config information is dodgy.
     */    
    public void configure(File file) throws IOException, IllegalArgumentException {
	ConfigurationProperties config = new ConfigurationProperties();
	config.load(new FileInputStream(file));

	scheduleMode = config.getProperty("schedule.mode",      DEFAULT_SCHEDULE_MODE);

	maxGroupLength = config.getLongValue("max.group.length", DEFAULT_MAX_GROUP_LENGTH);

	startDelay   = config.getIntValue("sunset.start.delay", DEFAULT_START_DELAY);

	sleepPeriod =  config.getLongValue("sleep.period", 15*60*1000L);

	// Work out sunset and twilight to get length of twilight!
	
	long    sunset   = obsDate.getSunset();
	long    twilight = obsDate.getEveningTwilight();
	
	long lengthTwilight = (twilight - sunset);
	
	// We choose the shorter of the 2.
	if (lengthTwilight < startDelay*60*1000L)
	    startDelay = (int)(lengthTwilight/(60*1000L));

	doAutoStartup = (config.getProperty("auto.start", "false").equals("true"));

	maxSeeing = config.getDoubleValue("max.seeing", DEFAULT_MAX_SEEING);

    }

    /** Deal with failed subtask.*/
    public void onSubTaskFailed(Task task) {	
	super.onSubTaskFailed(task);	

	// This could be awkward.
	if (task instanceof ScienceStartupTask)           
	    return;

	if
	    (task.getErrorIndicator().getErrorCode() == 702901 ||
	     task.getErrorIndicator().getErrorCode() == 702902 ||
	     task.getErrorIndicator().getErrorCode() == 601102) {
	    // snf 8-nov-06 add oss comms failure to allow BG mode to take over immediately.. 
	    // We sleep 15 minutes.
	    sleepPeriodEnd = System.currentTimeMillis() + sleepPeriod;
	    taskLog.log(1, CLASS, name, "onSubTaskFailed",
			"No observations available so sleeping until: "+sdf.format(new Date(sleepPeriodEnd)));
	    
	    if (task.getErrorIndicator().getErrorCode() == Group_Sequence_Task.SCHEDULER_OFFLINE) {
		EventQueue.postEvent("OSS_OFFLINE", EventQueue.PRIORITY_LEVEL);
	    }

	    
	}
    }
    
    /**  Overridden to carry out specific work when a subtask fails.
     */
    public void onSubTaskDone(Task task) {
	synchronized (taskList) {
	    super.onSubTaskDone(task);	   
	}
    }
    
    public void onAborting()   {
	super.onAborting();

	// ### TMP Add a STOP axes here.
	if (config.getProperty("stop.axes") != null) {
	    taskList.addTask(new StopTask(name+"/SCA_STOPAZM", this, STOP.AZIMUTH));
	    taskList.addTask(new StopTask(name+"/SCA_STOPALT", this, STOP.ALTITUDE));
	    taskList.addTask(new StopTask(name+"/SCA_STOPROT", this, STOP.ROTATOR));
	}
    }
        
    public void onDisposal()   {
	super.onDisposal();
    }
        
    public void onCompletion() {
	super.onCompletion();
	opsLog.log(1, "Completed Science-Operations Mode.");
    }

    /** Overridden to carry out specific work after the init() method is called.
     * Sets a number of FITS headers and subscribes to any required events.*/
    public void onInit() {
	super.onInit();
	opsLog.log(1, "Starting Science-Operations using scheduling mode: "+scheduleMode+
		   " and Start-Delay: "+startDelay+" mins after sunset.");
	FITS_HeaderInfo.current_TELMODE.setValue("ROBOTIC");
	FITS_HeaderInfo.current_COMPRESS.setValue("PROFESSIONAL"); 

	// Setup group instantiation counter.	
	puid = new PersistentUniqueInteger("%%group");

	try {
	    groupCounter = puid.get();
	} catch (Exception e) {
	    System.err.println("** WARNING - Unable to read initial group counter: "+e);
	    taskLog.log(1, CLASS, name, "onInit",
			"Error reading initial group counter: "+e);
	    taskLog.dumpStack(1, e);
	    groupCounter = 0;
	}

	// Always override until we decide not to.
	ngat.rcs.iss.ISS_AG_START_CommandImpl.setOverrideForwarding(true);
	ngat.rcs.iss.ISS_AG_STOP_CommandImpl.setOverrideForwarding(false);

    }

    /** Stops axes then switches tracking on.*/
    public void onStartup() {
	super.onStartup();
	firstJob = true;
    }


    /** Overriden to return <i>true</i> if it is 'night time'.
     * ScienceOps ALWAYS accepts control between sunset and sunrise
     * except for a delay after sunset.
     */
    public boolean acceptControl() { 		
	long now = System.currentTimeMillis();

	if (now < sleepPeriodEnd) {
	    notAcceptableReason = "SLEEPING";
	    return false;
	}

	if (overridden) {
	    if (enabled)
		notAcceptableReason = null;
	    else 
		notAcceptableReason = "MANUAL_OVERRIDE";
	    
	    return enabled;
	}
	
	if (obsDate.isPreNight(now) || obsDate.isPostNight(now)) {
	    System.err.println("**"+obsDate.getTimePeriod(now)+
			       "- SCIENCE AGENT Not Feasible:");
	    notAcceptableReason = "NOT_NIGHT";
	    return false;	   
	} else {
	    
	    int minsFromSunset = (int)((System.currentTimeMillis() - obsDate.getSunset())/(60*1000L));
	    boolean canDo = (minsFromSunset > startDelay);
	    System.err.println("**"+obsDate.getTimePeriod(now)+
			       "- "+minsFromSunset+" Mins after Sunset."+
			       "- SCIENCE AGENT "+(canDo ? "Feasible:" : " Not Feasible:"));

	    if (!canDo) {
		notAcceptableReason = "TOO_SOON_AFTER_SUNSET";
		return false;
	    }

	    double seeing = CCDSeeing.getInstance().getPredictedSeeing(now);

	    if (seeing > maxSeeing) {
		notAcceptableReason = "PREDICTED_SEEING_BAD";
		return false;
	    }
	    
	    notAcceptableReason = null;
	    return true;

	}
    } 

    /** Returns the reason for non-acceptance of control.*/
    public String getNonAcceptanceReason() { 
	return notAcceptableReason;
    }

    /** Overriden to return the time at which this ModalControlAgent will next request
     * control. SCA can always take control immediately if it is NIGHT time, otherwise
     * it will take place at the NEXT sunset.
     * @return Time when this MCA will next want/be able to take control (millis 1970).
     */
    public long demandControlAt() { 
	ObsDate obsDate = RCS_Controller.controller.getObsDate();
	long    now     = System.currentTimeMillis();

	if  (obsDate.isPreNight(now))  
	    return obsDate.getSunset();
	else if 
	    (obsDate.isPostNight(now))
	    return obsDate.getSunset()+ObsDate.ONE_DAY;
	else
	    return now + ObsDate.ONE_DAY;
    }
    
    /** Return true if the agent will want control at time- default false.*/
    public boolean willWantControlAt(long time) {
	// work out if its day/night how long into night or till dawn etc/
        return (Math.random() > 0.5 ? false: true);
    }

    /** Return true if wants control at time.*/
    public boolean wantsControl(long time) throws RemoteException {
	if (time < sleepPeriodEnd) {
            notAcceptableReason = "SLEEPING";
	    System.err.println("SCA: Sleeping until: "+sdf.format(new Date(sleepPeriodEnd)));
            return false;
        }
	
	Site site = RCS_Controller.controller.getObservatorySite(); 
       
	Position sun = Astrometry.getSolarPosition(time);
	
	double sunElev = sun.getAltitude(time, site);
	boolean sunup = (sunElev > 0.0);
	
	//System.err.println("SCA: test WantsControl: sun is: "+(sunup ? "UP" : "DOWN"));
	return (! sunup);

    }

      
    /** How long till this controller will definitely want control from time.*/
    public long nextWantsControl(long time) throws RemoteException {
	ObsDate obsDate = RCS_Controller.controller.getObsDate();

	if  (obsDate.isPreNight(time))  
	    return obsDate.getSunset();
	else if 
	    (obsDate.isPostNight(time))
	    return obsDate.getSunset()+ObsDate.ONE_DAY;
	else {
	    // we are in night. If now is leess than SPE we are sleeping probably
	    if (time < sleepPeriodEnd)
		return sleepPeriodEnd;
	    else
		return time + 24*3600*1000L;
	}

    }



    /** Creates the TaskList for this TaskManager. 
     * Starts off with just a single PreScheduler run, then various
     * Group and Standards Tasks are added as the night proceeds.*/
    protected TaskList createTaskList() {
	
	// Initial PRE-SCHEDULE request to OSS. 
//  	long maxIdle    = 30*60*1000L; // millis to wait (30 mins) - ## USE TimeSequencer ##
//  	long latestTime = System.currentTimeMillis() + 2*3600*1000L; // 2 hours from now - ## BUT use TimeSequencer ##
//  	long deltaTime  = 30*60*1000L; // millis start float period (30 mins) - ## USE CONFIG ? ##
//  	currentPreScheduleTask = 
//  	    new Schedule_Task(name+"/Init_PreSched", this, 
//  			      maxIdle, 
//  			      latestTime, 
//  			      deltaTime, 
//  			      true);// PRE_SCHED mode. 	
	return taskList;
    }  

    /**TaskSequencer method -  Overridden to return a new GroupSequenceTask to be 
     * controlled by this ModalTask.
     */
    public Task getNextJob() { 

	// First job is to stop the axes then set them to tracking!
	if (firstJob) {
	    firstJob = false;
	    if (doAutoStartup) {
		ScienceStartupTask startupTask = new ScienceStartupTask(name+"/SST", this);     	   
		return startupTask;
	    }
	}
	
	// ### TBD Check available time to next constraint or standards then add another grp-sequence into the list.
	long timeNextConstraint = 0L; 
	
	// ### TBD Pass this timeconstraint into the Schedule call.
	Group_Sequence_Task groupSequenceTask = 
	    new Group_Sequence_Task(name+"/GRPSEQ("+(groupSequenceCount++)+")",
				    this,
				    scheduleMode,
				    maxGroupLength,
				    timeLimit); // thats an amount of time
	try {
	    groupCounter = puid.increment();
	} catch (Exception e) {
	    taskLog.log(1, CLASS, name, "getNextJob",
			"Building symlink: Failed to increment group counter: "+e);
	}
	
	groupSequenceTask.setGroupCounter(groupCounter);

	setActivity("GS/"+groupSequenceCount+"/"+groupCounter);
	
	return groupSequenceTask; 
    }
    
   
   
}

/** $Log: Science_Ops_Task.java,v $
/** Revision 1.2  2007/01/05 14:58:08  snf
/** changed bug in SCHED_OFFLINE code.
/**
/** Revision 1.1  2006/12/12 08:27:29  snf
/** Initial revision
/**
/** Revision 1.1  2006/05/17 06:32:29  snf
/** Initial revision
/**
/** Revision 1.2  2002/09/16 09:38:28  snf
/** *** empty log message ***
/**
/** Revision 1.1  2001/04/27 17:14:32  snf
/** Initial revision
/** */
