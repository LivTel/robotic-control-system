/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.scm.detection;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.pos.*;
import ngat.rcs.tocs.*;
import ngat.rcs.science.*;
import ngat.rcs.calib.*;


import java.util.*;
import ngat.message.RCS_TCS.*;

/** Monitors Tracking in 1-3 axes and notifies observers when tracking lost.
 *
 * <dl>	
 * <dt><b>RCS:</b>
 * <dd>$Id:$
 * <dt><b>Source:</b>
 * <dd>$Source:$
 * </dl>
 * @author $Author:$
 * @version $Revision:$
 */

public class AxisTrackingMonitor implements Observer {
    
    protected Object lock = new Object();
   
    protected Vector listeners;

    /** Indicates that tracking should be monitored.*/
    protected volatile boolean track;

    double diff;   
 
    double max;

       
    double axInt;
 

    double sqInt;
  

    double sum;
 

    int count;

    long startTime;
    long timeStamp;
    long updateTimeStamp;

    boolean trkIsLost = false;
    int     trkStatus;
    long    trkLostAt;
    long    trkLostFor;

    long    maxTrkLostFor;
    boolean enableAlerts = false;

    public AxisTrackingMonitor() {
	listeners = new Vector();
    }

    /** Set the maximum time tracking can be lost for before signalling. (millis).*/
    public void setMaxTrackingLostTime(long delta) {
	this.maxTrkLostFor = delta;
    }

    /** Sets whether to generate alerts on lost tracking.*/
    public void setEnableAlerts(boolean enable) {
	this.enableAlerts = enable;
	System.err.println("TMon:: "+axisName+"Alerts are now "+(enableAlerts ? "ENABLED" : "DISABLED"));
    }

    public void setTrack(boolean track) {
	this.track = track;
    }
    
    /** Implementation of the java.util.Observer interface to handle notifications
     * from the StatusPool on status update. 
     */
    public void update(Observable source, Object args) {

	if ( ! (args instanceof TCS_Status) ) return;

	synchronized (lock) {
	    
	    TCS_Status status = (TCS_Status)args;
	       
	    updateTimeStamp = status.mechanisms.timeStamp;

	    // These are in units of: degrees

	    azDiff  = Math.abs(status.mechanisms.azDemand  - status.mechanisms.azPos);
	    altDiff = Math.abs(status.mechanisms.altDemand - status.mechanisms.altPos);
	    rotDiff = Math.abs(status.mechanisms.rotDemand - status.mechanisms.rotPos);

	    // Monitoring rotator tracking status.
	    // TODO if (trackRot) {
	    rotTrkStatus =  status.mechanisms.rotStatus;
	    //System.err.println("TMon:: Rotator Tracking status: "+TCS_Status.codeString(rotTrkStatus));

	    if (rotTrkStatus != TCS_Status.MOTION_TRACKING) {
	
		if (rotTrkIsLost) {
		    
		    rotTrkLostFor = updateTimeStamp - rotTrkLostAt;
		    //System.err.println("TMon:: Rotator Tracking lost for: "+ (rotTrkLostFor/1000)+" sec");

		    if (rotTrkLostFor > maxTrkLostFor) {
			//System.err.println("TMon:: Rotator Tracking lost exceeds max threshold");
			if (enableAlerts) {
			    EventQueue.postEvent("X_ROT_TRACK_LOST");

			    int it = 0;
			    Iterator tslist = listeners.iterator();
			    while (tslist.hasNext()) {			
				TrackingStatusListener tsl = (TrackingStatusListener)tslist.next();	
				System.err.println("TrkMon::TrackingLost Notification to TSL["+(++it)+"] "+tsl);
				tsl.trackingLost();
			    }

			    // Disable events after firing once
			    setEnableAlerts(false);
			}
		    } 
		    
		} else {
		    //System.err.println("TMon:: Rotator Tracking is now lost - started recording");
		    rotTrkLostAt = updateTimeStamp;
		    rotTrkIsLost = true;

		}

	    } else {

		if (rotTrkIsLost) {
		    //System.err.println("TMon:: Rotator Tracking re-established");
		    rotTrkIsLost = false;
		} 

	    }
	   
	    if (azDiff  > azMax)  azMax  = azDiff;
	    if (altDiff > altMax) altMax = altDiff;
	    if (rotDiff > rotMax) rotMax = rotDiff;

	    // integrated and time to sec ->  (deg/sec)**2
	    azInt  = azInt  + (double)(updateTimeStamp - timeStamp) * azDiff*azDiff   / 1000.0;
	    altInt = altInt + (double)(updateTimeStamp - timeStamp) * altDiff*altDiff / 1000.0;
	    rotInt = rotInt + (double)(updateTimeStamp - timeStamp) * rotDiff*rotDiff / 1000.0;
	    
	    // Add squared differences.
	    azSqInt  += azDiff*azDiff;
	    altSqInt += altDiff*altDiff;
	    rotSqInt += rotDiff*rotDiff;

	    // Add average terms
	    azSum  += status.mechanisms.azDemand  - status.mechanisms.azPos;
	    altSum += status.mechanisms.altDemand - status.mechanisms.altPos;
	    rotSum += status.mechanisms.rotDemand - status.mechanisms.rotPos;

	    count++;

	    timeStamp = updateTimeStamp ;

	}

    }

    /** Warning - alerts are now automatically enabled on reset ! */
    public void reset() {
	
	azDiff = 0.0;
	altDiff = 0.0;
	rotDiff = 0.0;

	azMax  = 0.0;
	altMax = 0.0;
	rotMax = 0.0;

	azInt  = 0.0;
	altInt = 0.0;
	rotInt = 0.0;

	azSqInt  = 0.0;
	altSqInt = 0.0;
	rotSqInt = 0.0;

	azSum  = 0.0;
	altSum = 0.0;
	rotSum = 0.0;

	count = 0;

	startTime = System.currentTimeMillis();
	timeStamp = startTime;
	
	rotTrkIsLost = false;
	setEnableAlerts(true);

    }

    /** Return az diff in degrees.*/
    public double getAzDiff()  { return azDiff; }

    /** Return alt diff in degrees.*/
    public double getAltDiff() { return altDiff; }

    /** Return rot diff in degrees.*/
    public double getRotDiff() { return rotDiff; }
 
    /** Return az max in degrees.*/
    public double getAzMax()  { return azMax; }

    /** Return alt max in degrees.*/
    public double getAltMax() { return altMax; }

    /** Return rot max in degrees.*/
    public double getRotMax() { return rotMax; }
 
    /** Return az int in asec.*/
    public double getAzRms()  { return 3600.0*Math.sqrt(1000.0*azInt/(double)(updateTimeStamp - startTime)); }

    /** Return alt int in asec.*/
    public double getAltRms() { return 3600.0*Math.sqrt(1000.0*altInt/(double)(updateTimeStamp - startTime)); }

    /** Return rot int in asec.*/
    public double getRotRms() { return 3600.0*Math.sqrt(1000.0*rotInt/(double)(updateTimeStamp - startTime)); }
    

    /** Return az int in asec.*/
    public double getAzInt()  { return 3600.0*azInt; }

    /** Return alt int in asec.*/
    public double getAltInt() { return 3600.0*altInt; }

    /** Return rot int in asec.*/
    public double getRotInt() { return 3600.0*rotInt; }
    
    /** Return STD Az.*/
    public double getAzStd() {
	return Math.sqrt(((double)count*azSqInt - azSum*azSum)/(count*(count-1)));
    }

    /** Return STD Alt.*/
    public double getAltStd() {
	return Math.sqrt(((double)count*altSqInt - altSum*altSum)/(count*(count-1)));
    }

    /** Return STD Rot.*/
    public double getRotStd() {
	return Math.sqrt(((double)count*rotSqInt - rotSum*rotSum)/(count*(count-1)));
    }
    
    /** Return time since last reset.*/
    public long getIntegrationTime() { return updateTimeStamp - startTime; }


    public void addTrackingStatusListener(TrackingStatusListener tsl) {
	if (!listeners.contains(tsl)) {
	    listeners.add(tsl);
	    System.err.println("TrkMon:: Added TrackStatusListener: "+tsl);
	}
    }
    
    public void removeTrackingStatusListener(TrackingStatusListener tsl) {
	System.err.println("TrkMon:: Requested to remove TrackStatusListener: "+tsl);
	if (!listeners.contains(tsl))
	    return;
	listeners.remove(tsl);
	System.err.println("AGMon:: Removed TrackStatusListener: "+tsl);
    }


}

/** $Log$ */
