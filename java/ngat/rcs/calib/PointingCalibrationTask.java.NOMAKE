/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.calib;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.pos.*;
import ngat.rcs.tocs.*;
import ngat.rcs.science.*;



import ngat.net.*;
import ngat.fits.*;
import ngat.phase2.*;
import ngat.instrument.*;
import ngat.phase2.nonpersist.*;
import ngat.astrometry.*;
import ngat.util.*;
import ngat.util.logging.*;
import ngat.message.RCS_TCS.*;

import java.io.*;
import java.util.*;

/** This Task controls the Telescope pointing calibration procedure.
 *
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: PointingCalibrationTask.java,v 1.1 2006/12/12 08:25:56 snf Exp $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/calib/RCS/PointingCalibrationTask.java,v $
 * </dl>
 * @author $Author: snf $
 * @version $Revision: 1.1 $
 */
public class PointingCalibrationTask extends CalibrationTask {

    /** ERROR_BASE for this Task type.*/
    public static final int ERROR_BASE = 1200;
    
    /** Default time available for an instrument twilight calibration.*/
    public static final double DEFAULT_MAX_RMS = 10.0;
    
    protected PointingTask newPointingTask;
   
    protected PointingTask defaultPointingTask;

    protected double maxRms;
    
    /** Create a PointingCalibrationTask using the supplied settings. 
     * @param name The unique name/id for this TaskImpl - 
     * should be based on the COMMAND_ID.
     * @param manager The Task's manager.
     */
    public PointingCalibrationTask(String      name,
				   TaskManager manager,
				   File        configFile,
				   File        historyFile,
				   Long        maxDuration,
				   Integer     invokation) {
	super(name, manager, configFile, historyFile, maxDuration, invokation);
    }
    
    protected void configure() throws IOException , IllegalArgumentException {
	ConfigurationProperties config = new ConfigurationProperties();	
	config.load(new FileInputStream(configFile));
	
	// Only looking for a max.sky.rms value.
	// This determines whether we accept the CALIB NEW result or revert to
	// the default pointing model.

	maxRms = config.getDoubleValue("max.sky.rms", DEFAULT_MAX_RMS);
	
    }
    
    public void onSubTaskDone(Task task) {	
	super.onSubTaskDone(task);
	if (task == newPointingTask) {
	    // If the sky rms is above the config limit 
	    // then swap in a CALIB DEFAULT PointingTask.
	    double skyRms = newPointingTask.getSkyRms();
	    if (skyRms > maxRms) {
		opsLog.log(1, "Pointing sky rms ("+ skyRms + " arcsec) exceeds max allowable ("+maxRms + " arcsec");
		defaultPointingTask = new PointingTask(name+"/DEFAULT",
						       this,
						       CALIBRATE.DEFAULT);
		taskList.addTask(defaultPointingTask);
	    } else {
		taskLog.log(1, CLASS, name, "onSubTaskDone", 
			    "New pointing calibration successful: sky rms: "+skyRms);
	    }
	} else if
	    (task == defaultPointingTask) {
	    double skyRms = defaultPointingTask.getSkyRms();
	    if (skyRms > maxRms) {
		taskLog.log(1, CLASS, name, "onSubTaskDone", 
			    "Default pointing calibration failed: sky rms: "+skyRms);
	    } else {
		taskLog.log(1, CLASS, name, "onSubTaskDone", 
			    "Default pointing calibration successful: sky rms: "+skyRms);
	    }
	}
    }

    public void onSubTaskFailed(Task task) {	
	super.onSubTaskFailed(task);	
	// Just ignore it.
	taskList.skip(task);
    }
    
    /** Overridden to carry out specific work after the TaskList is created.
    */
    public void onInit() {
	super.onInit();
	
	taskLog.log(ENTER, 3, CLASS, name, "onInit", "Setting FITS headers.");
	opsLog.log(1, "Starting Pointing Calibration.");
    }
    
    public void onDisposal()   {
	super.onDisposal();
    }
        
    public void onCompletion() {
	super.onCompletion();
	opsLog.log(1, "Completed Pointing Calibration.");
    }

    /** Overriden to write to the Ops log after failure, prior to disposal.*/
    public void onFailure() {
	super.onFailure();
	opsLog.log(1, "Failed Pointing Calibration"+
		   "\n\tCode:      "+errorIndicator.getErrorCode()+
		   "\n\tReason:    "+errorIndicator.getErrorString()+
		   "\n\tException: "+errorIndicator.getException());
    }

    /** Creates the TaskList for this TaskManager. 
     */
    protected TaskList createTaskList(TaskMonitorFactory tmfactory) {	
	newPointingTask = new PointingTask(name+"/NEW",
					   this,
					   CALIBRATE.NEW);
	taskList.addTask(newPointingTask);
	// E.g. CALIB_OPS/POINTING_CALIB/NEW
	  	
	return taskList;	
    }

}

/** $Log: PointingCalibrationTask.java,v $
/** Revision 1.1  2006/12/12 08:25:56  snf
/** Initial revision
/**
/** Revision 1.1  2006/05/17 06:31:23  snf
/** Initial revision
/**
/** Revision 1.1  2002/09/16 09:38:28  snf
/** Initial revision
/** */
