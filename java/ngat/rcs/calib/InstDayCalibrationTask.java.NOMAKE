/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.calib;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.pos.*;
import ngat.rcs.tocs.*;
import ngat.rcs.science.*;



import ngat.net.*;
import ngat.phase2.*;
import ngat.instrument.*;
import ngat.phase2.nonpersist.*;
import ngat.message.base.*;
import ngat.message.ISS_INST.*;

/** A leaf Task for performing Daytime calibration of an instrument.
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: InstDayCalibrationTask.java,v 1.1 2006/12/12 08:25:56 snf Exp $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/calib/RCS/InstDayCalibrationTask.java,v $
 * </dl>
 * @author $Author: snf $
 * @version $Revision: 1.1 $
 */
public class InstDayCalibrationTask extends Default_TaskImpl {
    
    public static final String CLASS = "InstDayCalibrationTask";
    
    /** Constant denoting the typical expected time for this Task to complete.*/
    public static final long DEFAULT_TIMEOUT = 60000L;

    /** Name of the Instrument to calibrate.*/
    protected String instId;

    /** The time available for this task to complete (msec).*/
    protected long timeAvailableToComplete;
    
    /** Counts the number of exposure frames.*/
    protected int countFrames;
    
    /** Create an DayCalibrationTask using the supplied timeToComplete.
     * Sets the Instrument and creates a Connection to its ControlSystem.
     * @param instId Name of the Instrument to calibrate.
     * @param timeAvailableToComplete The maximum time available for this task to complete by.
     * @param name The unique name/id for this TaskImpl - 
     * should be based on the COMMAND_ID.
     * @param manager The Task's manager.
     */
    public InstDayCalibrationTask(String      name,
				  TaskManager manager,
				  String      instId,
				  long        timeAvailableToComplete) {
	super(name, manager, instId);
	this.instId = instId;
	this.timeAvailableToComplete = timeAvailableToComplete;
	 	
	// -------------------------------
	// Set up the appropriate COMMAND.
	// -------------------------------
	
	DAY_CALIBRATE daycalib = new DAY_CALIBRATE(name);
	daycalib.setTimeToComplete(timeAvailableToComplete);
	
	command = daycalib;	
    }
    
    /** Overridden. When a DAY_CALIBRATE_ACK is received the filename of
     * the latest calib-frame is logged. When the associated 
     * DAY_CALIBRATE_DP_ACK is received the filename and counts are logged.
     */
    public void handleAck  (ACK ack) {
	super.handleAck(ack);
	
	if (ack instanceof DAY_CALIBRATE_DP_ACK) {
	    DAY_CALIBRATE_DP_ACK dack = (DAY_CALIBRATE_DP_ACK)ack;
	    logger.log(1, CLASS, name, "handleAck", "DAY_CALIBRATE_DP_ACK received:"+
		       "\nProcessed File: "+dack.getFilename()+
		       "\nMean Counts:    "+dack.getMeanCounts()+
		       "\nPeak Counts:    "+dack.getPeakCounts());
	    countFrames++;
	} else if
	    (ack instanceof DAY_CALIBRATE_ACK) {
	    DAY_CALIBRATE_ACK dack = (DAY_CALIBRATE_ACK)ack;
	    logger.log(1, CLASS, name, "handleAck", "DAY_CALIBRATE_ACK received:"+
		       "\nRaw File: "+dack.getFilename());	   
	} else {
	    logger.log(1, CLASS, name, "handleAck", ack.getClass().getName()+" received:");
	}
    }

    /** Carry out subclass specific initialization.
     * Set the calibration headers.*/
    public void onInit() {	
	super.onInit();
	FITS_HeaderInfo.current_TAGID.setValue    ("LT-ADMIN"); 
	FITS_HeaderInfo.current_USERID.setValue   ("LT-RCS");
	FITS_HeaderInfo.current_PROPID.setValue   ("LT-CALIBRATION"); 
	FITS_HeaderInfo.current_GROUPID.setValue  ("LT-DAY-CALIBRATION-"+instId); 		
	FITS_HeaderInfo.current_COMPRESS.setValue ("PROFESSIONAL");	
	FITS_HeaderInfo.current_OBSID.setValue    ("LT-DAY-CALIBRATION");
	// zap source stuff, mech stuff ?, OK meteorology.
	// E.g. LT-DAY-CALIBRATION-RATCAM-FRAME-12
    }
    
    /** Carry out subclass specific completion work. ## NONE ##.*/
    public void onCompletion(COMMAND_DONE response) {
	super.onCompletion(response);
    }
    
    /** Carry out subclass specific disposal work.   ## NONE ##.*/
    public void onDisposal() {
	super.onDisposal();
    }
  
}

/** $Log: InstDayCalibrationTask.java,v $
/** Revision 1.1  2006/12/12 08:25:56  snf
/** Initial revision
/**
/** Revision 1.1  2006/05/17 06:31:23  snf
/** Initial revision
/**
/** Revision 1.1  2002/09/16 09:38:28  snf
/** Initial revision
/** */
