/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.calib;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.pos.*;
import ngat.rcs.tocs.*;
import ngat.rcs.science.*;



import ngat.net.*;
import ngat.math.*;
import ngat.util.*;
import ngat.phase2.*;
import ngat.phase2.nonpersist.*;
import ngat.message.RCS_TCS.*;

import java.util.*;
import java.awt.*;
/** This Task creates a series of tasks 
 * to determine the optimum focus position for the Autoguider.
 *
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: AG_Focus_Cycle_Task.java,v 1.1 2006/12/12 08:25:56 snf Exp $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/calib/RCS/AG_Focus_Cycle_Task.java,v $
 * </dl>
 * @author $Author: snf $
 * @version $Revision: 1.1 $
 */
public class AG_Focus_Cycle_Task extends ParallelTaskImpl implements ChiSquaredFitUpdateListener {
    
    /** Acceptable pixel error (pixels).*/
    static double MAX_PIXEL_ERROR = 5.0;

    /** The start value for the range of AG-focus settings to try (mm).*/
    protected double focusStart;
    
    /** The focus increment to use (mm).*/
    protected double focusIncrement;

    /** The final value for the range of AG-focus settings to try (mm).*/
    protected double focusStop;

    /** Number of focus increments to use ( = focusRange / increment).*/
    protected int focusCount;
    
    /** Stores the set of focus/fwhm measurements.*/
    protected java.util.List focusResultsTable;

    /** The calculated optimum focus position (mm).*/
    protected double optimumFocus;

    /** Records the final chi-squared parameter.*/
    protected double chi;

    int recCount;

    GraphPlot plot;
    
    /** Create an Observation_Task using the supplied Observation and settings.
     * @param focusStart The start value of the range of AG-focus settings to use (mm).
     * @param focusStop The final value of the range of AG-focus settings to use (mm).
     * @param focusIncrement The focus increment to use (mm).
     * @param name The unique name/id for this TaskImpl - 
     * should be based on the COMMAND_ID.
     * @param manager The Task's manager.
     */
    public AG_Focus_Cycle_Task(String name,
			       TaskManager manager,
			       double focusStart,
			       double focusStop,
			       double focusIncrement) {
	super(name, manager);
	this.focusStart     = focusStart;
	this.focusStop      = focusStop;
	this.focusIncrement = focusIncrement;
	focusCount          = (int) ((focusStop - focusStart)/focusIncrement);
	focusResultsTable   = new Vector();

	System.err.println("AGFOCUS WITH: "+focusCount+ "STEPS");
//  	plot = new GraphPlot(50, -25.0f, +25.0f, 0.0f, 140.0f);
//  	// Data
//  	plot.setMarkSize(1, 4);
//  	plot.setMark(1, GraphPlot.CROSS);
	
//  	// Model
//  	plot.setMarkSize(2, 2);
//  	plot.setMark(2, GraphPlot.SPOT);
//  	plot.setJoinPoints(2, true);

//  	// Fit.
//  	plot.setMarkSize(3, 2);
//  	plot.setMark(3, GraphPlot.SPOT);
//  	plot.setJoinPoints(3, true);

//  	GraphFrame frame = new GraphFrame("AG-Focus Task", plot);	
//  	frame.setVisible(true);
    }
       
    /** For now if a subtask fails we just ignore it and carry on.*/
    public void onSubTaskFailed(Task task) {
	super.onSubTaskFailed(task);
	taskList.skip(task);
	//logger.log(ENTER, 1, "AG_Focus_Cycle_Task", name, taskList.toString());
    }
    
    
    public void onSubTaskAborted(Task task) {
	super.onSubTaskAborted(task);
}
    
    public void onSubTaskDone(Task task) {
	super.onSubTaskDone(task);
	if (task instanceof AG_Focus_Sequence_Task) {
	    AG_Focus_Sequence_Task theAG_Focus_Sequence_Task = (AG_Focus_Sequence_Task)task;	
	    double focus = theAG_Focus_Sequence_Task.getFocus();
	    double fwhm  = theAG_Focus_Sequence_Task.getFwhm();
	    focusResultsTable.add(new CartesianCoordinatePair(focus, fwhm));
	    //	    plot.putPoint((float)focus, (float)fwhm, 1);
	}

    }
    
    public void onAborting() {}
    
   
    public void onDisposal() {}
    
    /** Once the task has completed its subtasks there should be a set of focus
     * calibration data. This is passed to a QFit to work out a least squares
     * fit to the focus calibration to find the optimum focus.
     */
    public void onCompletion() {
	
	QuadraticFit qFit = new QuadraticFit();
	// Fudge these for now based on TCS_Simulation model.
	// Use Config settings:-
	// ag.focus.calibration.param.{a, b, c}.start.value.{min, max, step} and
	// ag.focus.calibration.param.step.count
	qFit.setParameterStartValues(QuadraticFit.PARAMETER_A, 0.05, 0.2,  0.05 );
	qFit.setParameterStartValues(QuadraticFit.PARAMETER_B, -2.0, 2.0,  0.25  );
	qFit.setParameterStartValues(QuadraticFit.PARAMETER_C, 10.0, 30.0, 1   );
	qFit.setParameterStepCount(10);
	qFit.setUpdateListener(this);
	// Add the points to it: x=focus(mm), y=fwhm(pixels).
	CartesianCoordinatePair point = null;
	Iterator it = focusResultsTable.iterator();
	while (it.hasNext()) {
	    point = (CartesianCoordinatePair)it.next();
	    qFit.addPoint(point.x, point.y);	    
	}
	qFit.quadraticFit();
	// Get the results and turn into an optimum focus position.
	double a   = qFit.getA();
	double b   = qFit.getB();
	double c   = qFit.getC();
	double chi = qFit.getChiSquared();
	optimumFocus = -b/(2.0*a);
	double w0 = c - b*b/(4.0*a);
	double ff = Math.sqrt(MAX_PIXEL_ERROR/(a*w0));

	// Calculate the rms diffs between Model and Observed at each measured point.
	it = focusResultsTable.iterator();
	int    np    =  0;
	double diff  = 0.0;
	double sum   = 0.0;
	double model = 0.0;
	while (it.hasNext()) {
	    point = (CartesianCoordinatePair)it.next();
	    model = a*point.x*point.x + b*point.x + c;
	    diff = model - point.y;
	    sum = sum + diff*diff;
	    np++;
	}
	double sigma = sum/(np-3); // N-M = Point - Degrees of freedom.	
	    
	//optimumFocus = 5.0;
	Tabulator table = new Tabulator("Autoguider Focus Calibration", new int[] {40, 20});
	table.putPair("Quadratic Fit param A", ""+a); table.hline('-');
	table.putPair("Quadratic Fit param B", ""+b ); table.hline('-');
	table.putPair("Quadratic Fit param C", ""+c ); table.hline('-');
	table.putPair("Chi square value", ""+chi); table.hline('-');
	table.putPair("Optimum focus", ""+optimumFocus+" mm"); table.hline('-');
	table.putPair("Min. FWHM at optimum", ""+w0+" pixels"); table.hline('-');
	table.putPair("Allowed Focus Spread for FWHM error ("+MAX_PIXEL_ERROR+")", "+/-"+ff+" mm"); table.hline('-');
	table.putPair("FWHM Measurement Sigma", ""+sigma+" pixels"); table.hline('-');
	
	opsLog.log(1, "Completed Autoguider-Focus Calibration/Measurement-cycle."+
		   "\n"+table.getBuffer());
	
	// Plot the Chi2 Fit FWHM params (if enabled).
	double focusValue = focusStart;
	double fwhm = 0.0;
	while (focusValue < focusStop) {
	    fwhm = a*focusValue*focusValue + b*focusValue + c;
	    //	    plot.putPoint((float)focusValue, (float)fwhm, 3);
	    focusValue += focusIncrement;
	}
	//	plot.annotate("Optimum: "+optimumFocus, (float)optimumFocus+2.0f, 10.0f);
    }
    
    /** Overridden to carry out specific work after the init() method is called.
     */
    public void onInit() { 
	opsLog.log(1,"Starting Autoguider-Focus Calibration/Measurement-cycle.");

	FITS_HeaderInfo.current_OBSID.setValue   ("LT-AG-FOCUS");   
	// Plot the model FWHM params.
	double focusValue = focusStart;
	double fwhm = 0.0;
	while (focusValue < focusStop) {
	    fwhm = 0.11*focusValue*focusValue - 1.111*focusValue + 22.77;
//  	    plot.putPoint((float)focusValue, (float)fwhm, 2);
	    focusValue += focusIncrement;
	}
    }
    
    /** Creates the TaskList for this TaskManager. A series of AG_Focus_Sequence_Tasks
     * for the specified range of focus settings.
     */
    protected TaskList createTaskList(TaskMonitorFactory tmfactory) {
	int count = 0;
	AG_Focus_Sequence_Task currentAG_Focus_Sequence_Task = null;
	AG_Focus_Sequence_Task prevAG_Focus_Sequence_Task    = null;
	double focusValue = focusStart;
	// Setup sequence. 
	try {
	    while (focusValue < focusStop) {
		currentAG_Focus_Sequence_Task = 
		    new AG_Focus_Sequence_Task(name+"/AG_Focus_Seq_"+count,
					       this,
					       focusValue);
		taskList.addTask(currentAG_Focus_Sequence_Task);
		// Dont try to link into the first task.
		if (count != 0) {
		    taskList.sequence(prevAG_Focus_Sequence_Task, currentAG_Focus_Sequence_Task);
		}
		prevAG_Focus_Sequence_Task = currentAG_Focus_Sequence_Task;
		count++;
		focusValue += focusIncrement;
	    }	  
	} catch (TaskSequenceException tx) {
	    errorLog.log(1, CLASS, name, "createTaskList", 
			 "Failed to create Task Sequence for AG-Focus calibration:"+tx);
	    failed = true;
	    errorIndicator.setErrorCode(TaskList.TASK_SEQUENCE_ERROR);
	    errorIndicator.setErrorString("Failed to create Task Sequence for AG-Focus calibration.");
	    errorIndicator.setException(tx);
	    return null;
	}
	return taskList;
    }
    
    /** Returns the table of focusing results as a List of CartesianCoordinatePairs.*/
    public java.util.List getFocusResultsTable() { return focusResultsTable; }
    
    /** Implementation of the ChiSquaredFitUpdateListener callback method.*/
    public void chiSquaredUpdate(int type, ChiSquaredFit csf) {	
	if (type == ChiSquaredFitUpdateListener.UPDATE_TYPE_BEST_CHI_SQUARED) {
	    chi = csf.getBestChiSquared();
	    taskLog.log(ENTER, 1, CLASS, name, "chiSquaredUpdate",
			"Chi squared update: Type: Best- chi squared is: "+chi);
	}
    }
    
    /** Returns the calculated optimum focus position (mm).*/
    public double getOptimumFocus() { return optimumFocus; }

    /** REturns the final chi-squared fit parameter.*/
    public double getChi() { return chi; }

}

/** $Log: AG_Focus_Cycle_Task.java,v $
/** Revision 1.1  2006/12/12 08:25:56  snf
/** Initial revision
/**
/** Revision 1.1  2006/05/17 06:31:23  snf
/** Initial revision
/**
/** Revision 1.3  2002/09/16 09:38:28  snf
/** *** empty log message ***
/**
/** Revision 1.2  2001/06/08 16:27:27  snf
/** Changed to PArallel impl.
/**
/** Revision 1.1  2001/04/27 17:14:32  snf
/** Initial revision
/** */



