/*   
    Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

    This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Robotic Control System is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Robotic Control System; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
package ngat.rcs.calib;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.iss.*;

import ngat.rcs.pos.*;
import ngat.rcs.tocs.*;
import ngat.rcs.science.*;



import ngat.net.*;
import ngat.fits.*;
import ngat.phase2.*;
import ngat.instrument.*;
import ngat.phase2.nonpersist.*;
import ngat.astrometry.*;
import ngat.util.*;
import ngat.util.logging.*;
import ngat.message.RCS_TCS.*;

import java.io.*;
import java.util.*;

/** This Task creates a series of InstDayCalibrationTasks to carry out the
 * Instrumentdaytime calibration.
 *
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: DayCalibrationTask.java,v 1.1 2006/12/12 08:25:56 snf Exp $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/calib/RCS/DayCalibrationTask.java,v $
 * </dl>
 * @author $Author: snf $
 * @version $Revision: 1.1 $
 */
public class DayCalibrationTask extends CalibrationTask {

    /** ERROR_BASE for this Task type.*/
    public static final int ERROR_BASE = 1100;

    public static final int CONFIG_ERROR         = 601101;

    //RCS_Controller.ERROR_BASE + ERROR_BASE + CONFIG_ERROR;

    public static final int TELESCOPE_ERROR = 601103;
    
    /** Default time available for an instrument twilight calibration.*/
    public static final long DEFAULT_DAY_CALIB_TIME = 15*60;
    
    protected List plannedTasks;
    
    protected SlewTask         slewTask;
    
    /** Create a DayCalibrationTask using the supplied settings. 
     * @param name The unique name/id for this TaskImpl - 
     * should be based on the COMMAND_ID.
     * @param manager The Task's manager.
     */
    public DayCalibrationTask(String      name,
			      TaskManager manager,
			      File        configFile,
			      File        historyFile,
			      Long        maxDuration,
			      Integer     invokation) {
	super(name, manager, configFile, historyFile, maxDuration, invokation);
	plannedTasks = new Vector();
    }
    
    protected void configure() throws IOException , IllegalArgumentException {
	ConfigurationProperties config = new ConfigurationProperties();	
	config.load(new FileInputStream(configFile));
	
	String key     = null;
	String instRef = null;
	String instId  = null;
	long   time    = 0L;
	Iterator it = config.keySet().iterator();
	while (it.hasNext()) {
	    key = (String)it.next();
	    int index = key.indexOf(".ID");
	    if  (index == -1) continue;
	    
	    // Get the instrument identifier reference.
	    instRef = key.substring(0, index);		
	    instId  = config.getProperty(instRef+".ID"); // = key.

	    // The available time in millis. (read as seconds).
	    time    = 1000L*config.getLongValue(instRef+".max.time", DEFAULT_DAY_CALIB_TIME);

	    String alias = Instruments.findAliasFor(instId);
	    System.err.println("Instrument: "+instId+" Alias: "+alias);
	    if (alias == null) {
		// Not known - dont do it!
	    } else {
		
		// Add the InstDayCalibration Task.
		plannedTasks.add(new InstDayCalibrationTask(name+"/"+instId+"_DAYCAL",
							    this,
							    instId,
							    time));
		// E.g. CALIB_OPS/DAYTIME_CALIB/RATCAM_DAYCAL
	    }
	}
    }

    public void onSubTaskDone(Task task) {	
	super.onSubTaskDone(task);	
    }
    
    public void onSubTaskFailed(Task task) {	
	super.onSubTaskFailed(task);	
	if ( task instanceof InstDayCalibrationTask ) {	
	    // If we are aborting then an InstDayCalib cannot be aborted it SHOULD fail.
	    taskList.skip(task);
	    //failed(CONFIG_ERROR, 
	    //  "Daycal failed due to: "+task.getErrorIndicator().getErrorString(),
	    //  task.getErrorIndicator().getException());	     
	} 
    }
    
    /** Overridden to carry out specific work after the TaskList is created.
    */
    public void onInit() {
	super.onInit();
	
	taskLog.log(ENTER, 3, CLASS, name, "onInit", "Setting FITS headers.");
	opsLog.log(1, "Starting Daytime Calibration.");
    }

    /** THIS IS JUST FOR TEST, MAY WELL BE WRONG, DOES worker.interrupt() 
     * after inserting an AbortTask. */
    public void onAborting() {
	synchronized (taskList) {
	    super.onAborting();
	    // ##### WORK OUT WHICH INSTRUMENT IS CURRENT HERE #############
	    taskList.addTask(new Abort_Task(name+"-(InstDaytimeAbort)", this, "RATCAM"));
	  
	}
	
    }   
    
    public void onDisposal()   {
	super.onDisposal();
    }
        
    public void onCompletion() {
	super.onCompletion();
	opsLog.log(1, "Completed Daytime Calibration.");
    }

    /** Creates the TaskList for this TaskManager. 
     */
    protected TaskList createTaskList(TaskMonitorFactory tmfactory) {	
	// Add in all the Inst Daycals and sequence them.
	Task currTask  = null;
	Task lastTask  = null;
	int  taskCount = 0;
	Iterator it = plannedTasks.iterator();
	try {
	    while (it.hasNext()) {
		currTask = (Task)it.next();
		taskList.addTask(currTask);
		if (taskCount != 0) {		  
		    taskList.sequence(lastTask, currTask);		   
		} 
		lastTask = currTask;
		taskCount++;
	    }
	} catch (TaskSequenceException tx) {
	    errorLog.log(1, CLASS, name, "createTaskList", 
			 "Failed to create Task Sequence for Daytime Calibration:"+tx);
	    failed = true;
	    errorIndicator.setErrorCode(TaskList.TASK_SEQUENCE_ERROR);
	    errorIndicator.setErrorString("Failed to create Task Sequence for Daytime Calibration.");
	    errorIndicator.setException(tx);
	    return null;
	}	
	return taskList;	
    }

}

/** $Log: DayCalibrationTask.java,v $
/** Revision 1.1  2006/12/12 08:25:56  snf
/** Initial revision
/**
/** Revision 1.1  2006/05/17 06:31:23  snf
/** Initial revision
/**
/** Revision 1.2  2002/09/16 09:38:28  snf
/** *** empty log message ***
/** */
