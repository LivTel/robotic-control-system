/**
 * 
 */
package ngat.rcs.sciops;

import java.util.*;

import ngat.icm.*;
import ngat.phase2.*;

/**
 * @author eng
 * 
 */
public class ExecutionTimingCalculator {
	/** General housekeeping at start and end of group execution.*/
	public static final double GROUP_SETUP_TIME = 20000L;
	
	public static final double SLEW_TIME = 60000.0;
	public static final double ACQUIRE_TIME = 10000.0;
	public static final double AUTO_ACQUIRE_TIME = 10000.0;
	public static final double DEFOCUS_TIME = 5000.0;
	public static final double OFFSET_TIME = 8000.0;
	public static final double ROTATE_TIME = 30000.0;
	public static final double DEFAULT_CONFIG_TIME = 5000.0;

	public static final double CCD_READOUT_TIME_MULT_FACTOR = 10.667;
	public static final double CCD_READOUT_TIME_FIXED_OVERHEAD = 9.33;
	public static final double IRCAM_DEFAULT_READOUT_TIME = 12000.0;
	public static final double POLARIMETER_READOUT_TIME = 20000.0;
	public static final double LOWRES_SPEC_READOUT_TIME = 20000.0;
	public static final double RISE_DEFAULT_READOUT_TIME = 100.0;
	public static final double GENERIC_DEFAULT_READOUT_TIME = 10000.0;

	private volatile IInstrumentConfig lastConfig = null;


    /**
     * 
     */
    public ExecutionTimingCalculator() {

    }
    
    public long calcExecTimeOfSequence(XIteratorComponent sequence) {
	
	double total = 0.0;
	
	List list = sequence.listChildComponents();
	Iterator il = list.iterator();
	while (il.hasNext()) {
	    ISequenceComponent sc = (ISequenceComponent) il.next();
	    total += getExecTime(sc);
	}
	return (long)total;
    }
    
    private double getExecTime(ISequenceComponent seq) {
	
	double total = 0.0;
	
	if (seq instanceof XIteratorComponent) {
	    XIteratorComponent iter = (XIteratorComponent) seq;
	    XIteratorRepeatCountCondition cc = (XIteratorRepeatCountCondition) iter.getCondition();
	    int count = cc.getCount();
	    
	    List list = seq.listChildComponents();
	    Iterator il = list.iterator();
	    while (il.hasNext()) {
		ISequenceComponent sc = (ISequenceComponent) il.next();
		total += getExecTime(sc);
	    }
	    return count * total;
	    
	} else if (seq instanceof XBranchComponent) {
	    
	    total += getBranchExecTime((XBranchComponent) seq);
	} else if (seq instanceof XExecutiveComponent) {
	    total += getActionExecTime((XExecutiveComponent) seq);
	}

	return  total;
	
    }

    private double getBranchExecTime(XBranchComponent bran) {

    	List components = bran.listChildComponents();
    	
    	if (components.size() != 2)
    		return 0.0;
    	
		// these are always iterators...
    	ISequenceComponent sred = (ISequenceComponent)components.get(0);
    	if (! (sred instanceof XIteratorComponent))
    		return 0.0;
		XIteratorComponent red = (XIteratorComponent)sred;
		List redList = red.listChildComponents();
		Iterator ired = redList.iterator();

		ISequenceComponent sblue = (ISequenceComponent)components.get(1);
		if (! (sblue instanceof XIteratorComponent))
    		return 0.0;
		XIteratorComponent blue = (XIteratorComponent)sblue;
		List blueList = blue.listChildComponents();
		Iterator iblue = blueList.iterator();

		// randomly pick one branch to start as master...
		Iterator master = null;
		Iterator slave = null;

		boolean first = true;
	       
		// cycle thro ops
		XExecutiveComponent mac = null;
		XExecutiveComponent sac = null;
		double macend = 0.0;
		double sacend = 0.0;
		double now = 0.0;
		while (first || (master.hasNext() || slave.hasNext())) {
			
		    first = false;
			// we assume both have items, may not be true
			if (Math.random() < 0.5) {
				master = ired;
				slave = iblue;
			} else {
				master = iblue;
				slave = ired;
			}
			
			// pick an action from master, work out when it will end...
			mac = (XExecutiveComponent) master.next();
			macend = now + getActionExecTime(mac);

			// see if the next slave op is compatible, if so assume execution,
			// jump to
			// sacend, else if not jump forward.
			sac = (XExecutiveComponent) slave.next();

			// keep trying compatible sacs
			while (compatible(mac, sac) && sacend <= macend) {

				sac = (XExecutiveComponent) slave.next();
				sacend += getActionExecTime(sac);

			}

		}

		return 0.0;
	}

	private boolean compatible(XExecutiveComponent mac, XExecutiveComponent sac) {

		IExecutiveAction maa = mac.getExecutiveAction();
		IExecutiveAction saa = sac.getExecutiveAction();

		if (maa instanceof XCalibration && saa instanceof IExposure)
			return false;

		return true;

	}

	private double getActionExecTime(XExecutiveComponent comp) {

		IExecutiveAction action = comp.getExecutiveAction();
		// see what sort it is e.g. exp, cfg, offset, setups
		// depending on the instrument (of last IC) define the readout etc.
		// need to keep track of last instrument change...

		if (action instanceof ITargetSelector) {
			return SLEW_TIME;
		} else if (action instanceof IAcquisitionConfig) {
			return ACQUIRE_TIME;
		} else if (action instanceof IAutoguiderConfig) {
			return AUTO_ACQUIRE_TIME;
		} else if (action instanceof IExposure) {
			return calculateExposureTime((IExposure) action, lastConfig);
		} else if (action instanceof IFocusOffset) {
			return DEFOCUS_TIME;
		} else if (action instanceof IInstrumentConfigSelector) {			
			IInstrumentConfigSelector ics = (IInstrumentConfigSelector)action;
			lastConfig = ics.getInstrumentConfig();
			return calculateConfigTime(lastConfig);			
		} else if (action instanceof IMosaicOffset) {
			return OFFSET_TIME;
		} else if (action instanceof IRotatorConfig) {
			return ROTATE_TIME;
		}
		return 0.0;

	}

	private double calculateConfigTime(IInstrumentConfig config) {
		return DEFAULT_CONFIG_TIME;
	}

	/** Calculate the exposure time given the current config. */
	private double calculateExposureTime(IExposure exposure, IInstrumentConfig config) {

		// TODO We should actually go off and grab the relevant ICap and call
		// InstReg.getCapProvider(cfg.getInstName(), ICap.getExposureTime(IExp)

		if (exposure instanceof XMultipleExposure) {
			XMultipleExposure xmult = (XMultipleExposure) exposure;
			double exp = xmult.getExposureTime();
			double count = xmult.getRepeatCount();

			return count * (exp + calculateReadoutTime(config));

		}
		return 0.0;
	}

	/** Calculate readout times for different configs. */
	private double calculateReadoutTime(IInstrumentConfig config) {
		if (config == null)
			return 1000.0;
		// TODO A fudge to workround problem in migration/extraction with
		// meaburn configs
		XInstrumentConfig xcfg = (XInstrumentConfig) config;
		String instName = xcfg.getInstrumentName().toUpperCase();
		XDetectorConfig xdc = (XDetectorConfig) xcfg.getDetectorConfig();
		int xb = xdc.getXBin();
		int yb = xdc.getYBin();
		int binxy = xb * yb;

		if (instName.equals("RATCAM")) {
		    return (double) (1000.0 * (CCD_READOUT_TIME_MULT_FACTOR / (double) binxy + CCD_READOUT_TIME_FIXED_OVERHEAD));
		} else if (instName.equals("SUPIRCAM")) {
		    return IRCAM_DEFAULT_READOUT_TIME;
		} else if (instName.equals("RINGO")) {
		    return POLARIMETER_READOUT_TIME;
		} else if (instName.equals("MEABURN")) {
		    return LOWRES_SPEC_READOUT_TIME;
		} else if (instName.equals("RISE")) {
		    return RISE_DEFAULT_READOUT_TIME;
		} else
		    return GENERIC_DEFAULT_READOUT_TIME;
	}

}
