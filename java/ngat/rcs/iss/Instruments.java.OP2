/*   
     Copyright 2006, Astrophysics Research Institute, Liverpool John Moores University.

     This file is part of Robotic Control System.

     Robotic Control Systemis free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     Robotic Control System is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with Robotic Control System; if not, write to the Free Software
     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package ngat.rcs.iss;

import ngat.rcs.*;

import ngat.rcs.tmm.*;
import ngat.rcs.tmm.executive.*;
import ngat.rcs.tmm.manager.*;

import ngat.rcs.emm.*;

import ngat.rcs.scm.*;
import ngat.rcs.scm.collation.*;
import ngat.rcs.scm.detection.*;

import ngat.rcs.comms.*;
import ngat.rcs.control.*;
import ngat.rcs.statemodel.*;

import ngat.rcs.tocs.*;
import ngat.rcs.science.*; //import ngat.rcs.calib.*;

import ngat.tcm.SciencePayload;
import ngat.util.*;
import ngat.phase2.*;
import ngat.instrument.*;
import ngat.astrometry.*;
import ngat.util.*;
import ngat.util.logging.*;

import ngat.icm.*;
import ngat.icm.test.*;

import java.io.*;
import java.util.*;
import java.text.*;
import java.lang.reflect.*; // this is just for the xy offses...
import java.awt.geom.*;

/**
 * Holds the collection of Instruments available on the telescope to the control
 * system. These must be configured by calling the initialize() method before
 * they can be referred to.
 * 
 * The top level instrument property file just has a list of available
 * instruments - by default it is called '.instruments' in $RCS_HOME. It is
 * created by the 'deploy' script or by running 'add_instrument'.
 * 
 * The entries in the top level file point to files called by the lowercase
 * version of their IDs in the instruments subdirectory. These contain the
 * generic instrument properties (e.g. class names, mount points and most
 * importantly the location of their specific config files. Typically these will
 * be in 'config/telId_instId_CFG.properties' and standards in
 * 'config/telId_instId_STD.properties'(where telId is the telescope ID).
 * 
 * The specific config files (e.g. 'config/lt_ratcam_CFG.properties') contain
 * specific information about that instrument and are passed as args to the
 * configure(File) method of the instrument-specific ngat.instrument.Instrument
 * subclass created to represent this instrument. These could contain
 * information such as Filter sets, window and binning ranges etc. They may also
 * contain links to shared configuration files (e.g. lt_ratcam_CFG.properties
 * holds references to the shared filter-database and semester-filter-config
 * files).
 * 
 * 
 * <dl>
 * <dt><b>RCS:</b>
 * <dd>$Id: Instruments.java,v 1.9 2007/09/07 09:38:48 snf Exp snf $
 * <dt><b>Source:</b>
 * <dd>$Source: /home/dev/src/rcs/java/ngat/rcs/iss/RCS/Instruments.java,v $
 * </dl>
 * 
 * @author $Author: snf $
 * @version $Revision: 1.9 $
 */
public class Instruments implements InstrumentRegistry, Logging {

	public static final String CLASS = "InstrumentRegistry";

	protected Map typeMap;

	protected Map mountMap;

	protected Map instMap;

	protected Map codeMap;

	protected Map aliasMap;

	protected Map rebootMap;

	protected Map apMap;

	protected Map calMap;

	protected Map calHistMap;

	protected Map portMap;

	protected Object lock;

	protected static Logger logger;

	/** The current Instrument selection. */
	//public static Instrument currentInstrument;

	/** Singleton instance. */
	protected static final Instruments instance = new Instruments();

	/**
	 * Create a singleton instance, Note: these maps should really be made
	 * available via ICM.
	 */
	protected Instruments() {
		typeMap = Collections.synchronizedMap(new TreeMap());
		instMap = Collections.synchronizedMap(new TreeMap());
		codeMap = Collections.synchronizedMap(new TreeMap());
		aliasMap = Collections.synchronizedMap(new TreeMap());
		mountMap = Collections.synchronizedMap(new TreeMap());
		rebootMap = Collections.synchronizedMap(new TreeMap());
		apMap = Collections.synchronizedMap(new TreeMap());
		calMap = Collections.synchronizedMap(new TreeMap());
		calHistMap = Collections.synchronizedMap(new TreeMap());
		portMap = Collections.synchronizedMap(new TreeMap());
		lock = new Object();
	}

	/**
	 * Configure the InstrumentRegistry.
	 * 
	 * @param configFile
	 *            File containing instrument setup details.
	 * @param logName
	 *            Name of the Logger to use for reporting.
	 * @exception IOException
	 *                If any I/O error occurs while loading a config.
	 * @exception IllegalArgumentException
	 *                If any parameters cannot be parsed or are missing from a
	 *                conf ig file.
	 */
/*	public static void initialize(RCS_Controller controller, File configFile, String logName) throws IOException, IllegalArgumentException {

		logger = LogManager.getLogger(logName);

		ConfigurationProperties config = new ConfigurationProperties();

		// Configure the instance from a config file.
		InputStream in = new FileInputStream(configFile);
		config.load(in);

		//instance.configure(controller, config);
	}*/

	/**
     */
/*	public void configure(RCS_Controller controller, ConfigurationProperties config) throws IOException, IllegalArgumentException {
		String key = null;
		String instId = null;
		String instClazz = null;
		String cfgClazz = null;
		String desc = null;
		String icFile = null;
		String stdFile = null;
		String alias = null;
		String mount = null;
		double apertureOffsetX = 0.0;
		double apertureOffsetY = 0.0;
		double rotatorOffset = 0.0;
		int rebootLevel = 0;
		boolean skyModelProvider = false;

		boolean requiresAcquisition = false;
		String acqInstName = null;
		double acqX = 0.0;
		double acqY = 0.0;

		// fudge to correct SKYPA returned from TCS due to non-standard
		// instrument alignments
		double rotatorCorrection = 0.0;

		int portNumber = 0;

		// NEW ICM
		TestInstrumentCalibration icalib = null;
		InstrumentCalibrationHistory ich = null;

		long now = System.currentTimeMillis();

		// Look for all keys of the form 'xxx.ID'.
		int ii = 0;
		Iterator it = config.keySet().iterator();
		while (it.hasNext()) {
			key = (String) it.next();
			int index = key.indexOf(".ID");
			if (index == -1)
				continue;

			// Get the instrument identifier reference. (usually upper-case).
			instId = config.getProperty(key);

			// Lookup the individual instrument's generic config file.
			// e.g. instruments/ratcam.properties

			File instConfigFile = new File("instruments", instId.toLowerCase() + ".properties");

			logger.log(2, CLASS, "", "configure", "Searching for instrument generic config file: "
					+ instConfigFile.getPath());

			ConfigurationProperties instConfig = new ConfigurationProperties();

			InputStream in = new FileInputStream(instConfigFile);
			instConfig.load(in);
			logger.log(2, CLASS, "", "configure", "Loaded config for: " + instId);

			instClazz = instConfig.getProperty("instrument.class");
			cfgClazz = instConfig.getProperty("config.class");
			desc = instConfig.getProperty("description");
			icFile = instConfig.getProperty("config.file");
			// stdFile = instConfig.getProperty("standards.config.file");
			alias = instConfig.getProperty("tcs.alias");
			mount = instConfig.getProperty("mount.point");
			rebootLevel = instConfig.getIntValue("reboot.level", 0);
			skyModelProvider = (instConfig.getProperty("sky.model.provider") != null); // defaults
			// to
			// false
			apertureOffsetX = instConfig.getDoubleValue("aperture.offset.x", 0.0);
			apertureOffsetY = instConfig.getDoubleValue("aperture.offset.y", 0.0);
			rotatorOffset = Math.toRadians(instConfig.getDoubleValue("rotator.offset", 0.0));
			requiresAcquisition = (instConfig.getProperty("acquisition.required") != null); // defaults
			// to
			// false
			if (requiresAcquisition) {
				acqInstName = instConfig.getProperty("acquisition.instrument");
				acqX = instConfig.getDoubleValue("acquisition.offset.x", 0.0);
				acqY = instConfig.getDoubleValue("acquisition.offset.y", 0.0);
			}

			// science fold port
			try {
				portNumber = instConfig.getIntValue("science.fold.port");
			} catch (Exception e) {
				logger.log(1, CLASS, "", "configure", "Error configuring Instrument port number: " + e);
				throw new IllegalArgumentException("Error configuring Instrument port number: " + e);
			}

			// Rotator skyPA correction (read as degrees).
			rotatorCorrection = Math.toRadians(instConfig.getDoubleValue("rotator.sky.correction", 0.0));

			// Calibration config
			try {
				File icalfile = instConfig.getFile("calibration.config.file");
				icalib = new TestInstrumentCalibration();
				PropertiesConfigurator.use(icalfile).configure((PropertiesConfigurable) icalib);
				logger.log(1, CLASS, "", "configure", "Instrument calibration requirements loaded: " + icalib);
			} catch (Exception e) {
				logger.log(1, CLASS, "", "configure", "Error configuring Instrument calibration requirements: " + e);
				throw new IllegalArgumentException("Error configuring Instrument calibration requirements: " + e);
			}

			// Calibration history
			ich = null;
			try {
				File file = instConfig.getFile("calibration.history.file");
				ich = InstrumentCalibrationHistory.load(file);
				logger.log(1, CLASS, "", "configure", "Instrument calibration history read from: " + file.getPath()
						+ " as " + ich);

			} catch (Exception e) {
				logger.log(1, CLASS, "", "configure", "Error loading Instrument calibration history: " + e);
			}
			// check it wasnt saved as a null object on first load/save cycle.
			if (ich == null) {
				ich = new InstrumentCalibrationHistory(instId);
				logger.log(1, CLASS, "", "configure", "Created NEW instrument calibration history: " + ich);
			}

			logger.log(1, CLASS, "", "configure", "Instrument calibration history is: " + ich);

			ii++; // instrument aperture number.

			// Create the Instance of this Instrument.
			Instrument instObj = null;
			try {
				logger.log(1, CLASS, "", "configure", "Ready to create instrument class: [" + instClazz + "]");
				Class instClass = Class.forName(instClazz);
				Constructor con = instClass.getConstructor(new Class[] { String.class });

				instObj = (Instrument) con.newInstance(new Object[] { instId });
				instMap.put(instId, instObj);
				apMap.put(instId, new Integer(ii));// store aperture number
				calMap.put(instId, icalib);
				calHistMap.put(instId, ich);

			} catch (Exception ex) {
				ex.printStackTrace();
				throw new IllegalArgumentException("Generating instrument class for: " + instId + " : " + ex);
			}

			System.err.println("Created instrument: Class=" + instClazz + " actual=" + instObj);
			logger.log(1, CLASS, "", "configure", "\nCreated and stored Instrument description: "
					+ "\n\tInstrument ID:    "
					+ instId
					+ "\n\tClass:            "
					+ instClazz
					+ "\n\tConfig Class:     "
					+ cfgClazz
					+ "\n\tDescription:      "
					+ desc
					+ "\n\tInst Config File: "
					+ icFile
					+ "\n\tStandards Config: "
					+ stdFile
					+ "\n\tTCS Alias:        "
					+ alias
					+ "\n\tMount point:      "
					+ mount
					+ "\n\tScience fold port: "
					+ portNumber
					+ "\n\t"
					+ (skyModelProvider ? "SkyModel Provider" : "Not a SkyModel Provider")
					+ "\n\tApertureOffset:   #"
					+ ii
					+ " : ("
					+ apertureOffsetX
					+ ","
					+ apertureOffsetY
					+ ")"
					+ "\n\tRotatorOffset     "
					+ Position.toDegrees(rotatorOffset, 2)
					+ "\n\tAcquisition:      "
					+ (requiresAcquisition ? "Required" + "\n\t  Acq Inst:       " + acqInstName
							+ "\n\t   Offset X:      " + acqX + " pixels" + "\n\t   Offset Y:      " + acqY + " pixels"
							: "Not required")
					+ "\n\tRotator misalign: "
					+ Position.toDegrees(rotatorCorrection, 2)
					+ "\n\tCalibration:      " + icalib + "\n\t Cal.History:     " + ich);

			// Create a Class for the InstConfig.
			try {
				System.err.println("I: Ready create instrument config class: " + cfgClazz);
				Class icClass = Class.forName(cfgClazz);
				System.err.println("II:Inst Cfg Class will be: [" + icClass.getName() + "]");
				typeMap.put(icClass.getName(), instObj);
				logger.log(2, CLASS, "", "configure", "Stored Config Class into types map.");
			} catch (Exception ex) {
				throw new IllegalArgumentException("Generating instrument config class for: " + instId + " : " + ex);
			}

			// Create a Class for the InstConfig subclass.
			try {
				instObj.configure(new File(icFile));
				logger.log(2, CLASS, "", "configure", "Configured Instrument: " + instId);
			} catch (IOException iox) {
				logger.log(ERROR, 2, "Instruments", "-", "configure", "While configuring:" + instId + " : " + iox);
				throw iox;
			} catch (IllegalArgumentException iax) {
				logger.log(ERROR, 2, "Instruments", "-", "configure", "While configuring: " + instId + " : " + iax);
				throw iax;
			}

			// Save the TCS Alias.
			aliasMap.put(instId, alias);

			// Check the mount point.
			mountMap.put(instId, mount);

			rebootMap.put(instId, new Integer(rebootLevel));

			portMap.put(instId, new Integer(portNumber));

			// NEW STUFF: Does it provide skyModel data. ?
			instObj.setSkyModelProvider(skyModelProvider);

			// NEW STUFF: Aperture offsets for acquisition
			instObj.setApertureOffsetX(apertureOffsetX);
			instObj.setApertureOffsetY(apertureOffsetY);

			// NEW STUFF: Rotator offsets
			instObj.setRotatorOffset(rotatorOffset);

			// NEW STUFF: Acquire offsets etc
			instObj.setRequiresAcquisition(requiresAcquisition);
			instObj.setAcquisitionInstrumentName(acqInstName);
			instObj.setAcquisitionOffsetX(acqX);
			instObj.setAcquisitionOffsetY(acqY);

			instObj.setRotatorAlignmentCorrection(rotatorCorrection);

			// Give it a default config for now.
			instObj.loadConfig();
			
			// TEMPORARY - configure SciencePayload
			InstrumentDescriptor iid = new InstrumentDescriptor(instId);
			SciencePayload sci = controller.getTelescope().getTelescopeSystem().getSciencePayload();
			sci.addAliasMapping(iid, alias);		
			sci.addPortMapping(iid, portNumber);
			sci.addRebootMapping(iid, rebootLevel);
			sci.addMountMapping(iid, new File(mount));
			sci.addApertureMapping(iid, ii);
			
			logger.log(2, CLASS, "", "configure", "Configured science payload settings for: "+instId);
			
		} // next instrument

	}
*/
	// /** Load the instrument calib from serial file.*/
	// private InstrumentCalibration loadCalib(File file) throws Exception {

	// ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));

	// InstrumentCalibration calib = (InstrumentCalibration)in.readObject();

	// return calib;

	// }

	/** save the instrument calib to a serial file. */
/*	public static void saveCalib(String instId) throws Exception {

		Instrument inst = findInstrument(instId);
		InstrumentCalibrationHistory hist = findCalibrationHistory(instId);

		File instCalibFile = new File("instruments/" + instId.toLowerCase() + ".calib.dat");
		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(instCalibFile));
		oos.flush();
		oos.writeObject(hist);
		oos.close();

		logger.log(1, CLASS, "", "saveCalib", "Saved calibration for " + instId + " to " + instCalibFile.getPath()
				+ " CalHist=" + hist);

	}
*/
	/**
	 * Returns the Instrument which uses the specified Config subclass. If no
	 * instrument uses this class then returns NULL.
	 */
	/*public Instrument getInstrumentFor(InstrumentConfig config) {
		synchronized (lock) {
			if (config == null)
				return null;
			return (Instrument) typeMap.get(config.getClass().getName());
		}
	}*/

	/**
	 * Returns the Instrument which uses the specified Config subclass. If no
	 * instrument uses this class then returns NULL.
	 */
	/*public static Instrument findInstrumentFor(InstrumentConfig config) {
		return getInstance().getInstrumentFor(config);
	}
*/
	/**
	 * Returns the Instrument identified by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public Instrument getInstrument(String instId) {
		synchronized (lock) {
			return (Instrument) instMap.get(instId.toUpperCase());
		}
	}
*/
	/**
	 * Returns the Instrument identified by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static Instrument findInstrument(String instId) {
		return getInstance().getInstrument(instId.toUpperCase());
	}
*/
	/**
	 * Returns the Instrument alias for the Instrument identified by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	public String getAliasFor(String instId) {
		synchronized (lock) {
			return (String) aliasMap.get(instId.toUpperCase());
		}
	}

	/**
	 * Returns the Instrument alias for the Instrument identified by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static String findAliasFor(String instId) {
		return getInstance().getAliasFor(instId.toUpperCase());
	}
*/
	/**
	 * Returns the Instrument mount point for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
/*	public String getMountPoint(String instId) {
		synchronized (lock) {
			return (String) mountMap.get(instId.toUpperCase());
		}
	}*/

	/**
	 * Returns the Instrument mount point for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static String findMountPoint(String instId) {
		return getInstance().getMountPoint(instId.toUpperCase());
	}*/

	/**
	 * Returns the Instrument calibration for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public InstrumentCalibration getCalibration(String instId) {
		synchronized (lock) {
			return (InstrumentCalibration) calMap.get(instId.toUpperCase());
		}
	}
*/
	/**
	 * Returns the Instrument calibration for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static InstrumentCalibration findCalibration(String instId) {
		return getInstance().getCalibration(instId.toUpperCase());
	}
*/
	/**
	 * Returns the Instrument calibration history for the Instrument identified
	 * by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public InstrumentCalibrationHistory getCalibrationHistory(String instId) {
		synchronized (lock) {
			return (InstrumentCalibrationHistory) calHistMap.get(instId.toUpperCase());
		}
	}*/

	/**
	 * Returns the Instrument calibration history for the Instrument identified
	 * by the name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static InstrumentCalibrationHistory findCalibrationHistory(String instId) {
		return getInstance().getCalibrationHistory(instId.toUpperCase());
	}*/

	/**
	 * Returns the Instrument reboot level for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public int getRebootLevel(String instId) {
		synchronized (lock) {
			try {
				Integer rb = (Integer) rebootMap.get(instId.toUpperCase());
				if (rb == null)
					return 0;
				return rb.intValue();
			} catch (Exception e) {
				return 0;
			}

		}
	}*/

	/**
	 * Returns the Instrument reboot level for the Instrument identified by the
	 * name.
	 * 
	 * @param instId
	 *            Global name of the Instrument.
	 */
	/*public static int findRebootLevel(String instId) {
		return getInstance().getRebootLevel(instId.toUpperCase());
	}
*/
	// TBD 01-03-2007 These need setting up soonish (needs some sort of Offset
	// class defined - ngat_phase2? )

	// ### SkyModeProvider indicates that the dprt returns from exposures on the
	// specd instrument
	// ### contain useful seeing (and maybe other info) for updating the
	// SkyModel.

	/** Returns whether they are capable of providing data for a SkyModel. */
	//public static boolean findSkyModelProvider(String instId) {
	//	Instrument inst = findInstrument(instId.toUpperCase());
	//	if (inst != null)
	//		return inst.isSkyModelProvider();
		// dont know...
	//	return false;
	//}

	// ### Aperture offset for the specd instrument (under specd config -may be
	// degenerate
	// ### need to wait and see).

	/** Returns the aperture offset required under the specified configuration. */
/*	public static Point2D findApertureOffset(String instId, InstrumentConfig config) {
		Instrument inst = findInstrument(instId.toUpperCase());
		if (inst != null)
			return new Point2D.Double(inst.getApertureOffsetX(), inst.getApertureOffsetY());
		// if we cant find it use (0,0)
		return new Point2D.Double(0.0, 0.0);
	}
*/
	/** Return the aperture number for this instrument. */
	//public int getApertureNumber(String instId) {
	//	return ((Integer) apMap.get(instId.toUpperCase())).intValue();
	//}

	/** Return the aperture number for this instrument. */
	//public static int findApertureNumber(String instId) {
	//	return getInstance().getApertureNumber(instId.toUpperCase());
	//}

	/** Return the science fold port number for this instrument. */
	//public int getPortNumber(String instId) {
	//	return ((Integer) portMap.get(instId.toUpperCase())).intValue();
	//}

	/** Return the science fold port number for this instrument. */
//	public static int findPortNumber(String instId) {
	//	return getInstance().getPortNumber(instId.toUpperCase());
//	}

	/**
	 * Returns an Iterator over the set of Instruments known to the system. Note
	 * usual synchronization issues re- iterators.
	 * 
	 * @return The list of Instrument IDs known to the system as Strings.
	 */
	/*public Iterator listInstrumentSet() {
		synchronized (lock) {
			return instMap.keySet().iterator();
		}
	}*/

	/**
	 * Returns an Iterator over the set of Instruments known to the system.
	 * 
	 * @return The list of Instrument IDs known to the system as Strings.
	 */
/*	public static Iterator findInstrumentSet() {
		return getInstance().listInstrumentSet();
	}
*/
	/**
     *//*
	public void addInstrumentEventCode(String eventId, String instId, boolean online) {
		synchronized (lock) {
			System.err.println("Attempting to place: Evcode: " + eventId + " InstId: " + instId + " OL: " + online);
			codeMap.put(eventId, new EventMap(getInstrument(instId), online));
		}
	}

	*//**
	 * Returns the Instrument for which the EventCode is registered.
	 * 
	 * @param eventId
	 *            The EventCode to match with an Instrument.
	 *//*
	public Instrument getInstrumentForEventCode(String eventId) {
		synchronized (lock) {
			return ((EventMap) codeMap.get(eventId)).instrument;
		}
	}

	*//**
	 * Returns the Instrument for which the EventCode is registered.
	 * 
	 * @param eventId
	 *            The EventCode to match with an Instrument.
	 *//*
	public static Instrument findInstrumentForEventCode(String eventId) {
		return getInstance().getInstrumentForEventCode(eventId);
	}

	*//**
	 * Returns True if the EventCode is an ONLINE event False if OFFLINE.
	 *//*
	public boolean isOnlineEvent(String eventId) {
		synchronized (lock) {
			return ((EventMap) codeMap.get(eventId)).online;
		}
	}

	public static boolean checkOnlineEvent(String eventId) {
		return getInstance().isOnlineEvent(eventId);
	}

	*//**
	 * Returns the EventCode for the given Instrument id for either an ONLINE
	 * (true) or OFFLINE (false) event. Returns -1 if there is no instrument so
	 * identified.
	 *//*
	public String getEventCode(String instId, boolean online) {
		synchronized (lock) {
			Instrument inst = getInstrument(instId);
			// Return a best guess.
			if (inst == null)
				return instId + "_" + (online ? "ONLINE" : "OFFLINE");

			String key = null;
			String kinstId = null;
			boolean konline = false;
			Iterator it = codeMap.keySet().iterator();
			while (it.hasNext()) {
				key = (String) it.next();
				kinstId = ((EventMap) codeMap.get(key)).instrument.getName();
				konline = ((EventMap) codeMap.get(key)).online;
				if (kinstId.equals(instId) && ((online && konline) || (!konline && !online)))
					return key;
			}
		}
		return "UNKNOWN";
	}

	*//**
	 * Returns the EventCode for the given Instrument id for either an ONLINE
	 * (true) or OFFLINE (false) event.
	 *//*
	public static String findEventCode(String instId, boolean online) {
		return getInstance().getEventCode(instId, online);
	}
*/
	/**
	 * Returns the singleton instance - there is no reason for any other class
	 * to call this method currrently as all InstrumentRegistry calls are
	 * directed via static accessors.
	 */
	public static Instruments getInstance() {
		return instance;
	}

	/*class EventMap {

		public Instrument instrument;

		public boolean online;

		EventMap(Instrument instrument, boolean online) {
			this.instrument = instrument;
			this.online = online;
		}
	}
*/
}

/**
 * $Log: Instruments.java,v $ /** Revision 1.9 2007/09/07 09:38:48 snf /** added
 * calibration stuff and removed confStandards /** /** Revision 1.8 2007/08/30
 * 09:56:13 snf /** added acquire stuff /** /** Revision 1.7 2007/07/05 11:32:24
 * snf /** checkin /** /** Revision 1.6 2007/04/12 11:13:10 snf /** added
 * rotator offset config /** /** Revision 1.5 2007/03/21 10:06:23 snf /** added
 * aperture number etc /** /** Revision 1.4 2007/03/20 13:46:09 snf /** added
 * aperture offsets /** /** Revision 1.3 2007/03/07 10:43:58 snf /** Added
 * config for SkyModelProvider status. /** /** Revision 1.2 2007/03/01 08:22:23
 * snf /** added isSkyModelProvider and getApertureOffset but commented out as
 * not yet ready to use, not fully defined anyway. /** /** Revision 1.1
 * 2006/12/12 08:30:20 snf /** Initial revision /** /** Revision 1.1 2006/05/17
 * 06:34:28 snf /** Initial revision /** /** Revision 1.2 2002/09/16 09:38:28
 * snf /** *** empty log message *** /** /** Revision 1.1 2001/04/27 17:14:32
 * snf /** Initial revision /**
 */

