#
# --------------------------------
# State Model Network Description.
# --------------------------------
#

#
#--------------------------------------------------------------------
# Petri Net Layout and Variable Mapping Section.
#--------------------------------------------------------------------
#
# PLACE <PlaceID> [MAPS <State_Var> [CLAMPED | EVENT]] 
#
#--------------------------------------------------------------------
#

#
#--------------------------------------------------------------------
# Conditional Place Definitions.
#--------------------------------------------------------------------
#

PLACE  C:SYSTEM    MAPS VAR_SYSTEM	CLAMPED
PLACE  C:NETWORK   MAPS VAR_NETWORK	CLAMPED
PLACE  C:CONTROL   MAPS VAR_CONTROL	CLAMPED
PLACE  C:IMPAIR    MAPS VAR_IMPAIR	CLAMPED
PLACE  C:THREAT    MAPS VAR_THREAT	CLAMPED
PLACE  C:ENCLOSURE MAPS VAR_ENCLOSURE	CLAMPED
PLACE  C:INTENT    MAPS VAR_INTENTION	CLAMPED
PLACE  C:POWER     MAPS VAR_POWER       CLAMPED
PLACE  C:SHUTDOWN  MAPS VAR_SHUTDOWN_INTENTION CLAMPED
PLACE  C:IMODE     MAPS VAR_INIT_MODE   CLAMPED
PLACE  C:PERIOD    MAPS VAR_PERIOD      CLAMPED

PLACE C:ENGINEER   MAPS VAR_ENGINEERING CLAMPED
PLACE C:OSS	   MAPS VAR_OSS_STATE   CLAMPED
PLACE C:AUX_NODES  MAPS VAR_AUX_NODES   CLAMPED

#
#--------------------------------------------------------------------
# General State Place Definitions.
#--------------------------------------------------------------------
#

PLACE INIT_DAY_OPS
PLACE STANDBY_DAY_OPS
PLACE RUNNING_DAY_OPS
PLACE ABORTING_DAY_OPS

PLACE INIT_OPS
PLACE STANDBY_NIGHT_OPS
PLACE RUNNING_NIGHT_OPS
PLACE ABORTING_NIGHT_OPS

PLACE ENABLED_NIGHT_OPS
PLACE INHIB_OPS

PLACE ENG
PLACE INIT
PLACE FAULT
PLACE POWER_DOWN
PLACE STOPPING

PLACE SMT1
PLACE SMT2
PLACE SMT3

PLACE SUDDEN_CLOSE
PLACE HOLDING
PLACE PREEMPT

# Shutdown enablement flag.
PLACE SHUTDOWN_ENABLE

#
#--------------------------------------------------------------------
# Transitional State Places.
#--------------------------------------------------------------------
#

PLACE TRANS_STARTING
PLACE TRANS_STOPPING
PLACE TRANS_OPENING
PLACE TRANS_INIT
PLACE TRANS_CLOSING
PLACE TRANS_FINAL
PLACE TRANS_SAFE

#
# Ready to start transient op and completed.
#

PLACE READY_START
PLACE DONE_START
PLACE READY_STOP
PLACE DONE_STOP
PLACE READY_OPEN
PLACE DONE_OPEN
PLACE READY_CLOSE
PLACE DONE_CLOSE

#
#--------------------------------------------------------------------
# Event Places.
#--------------------------------------------------------------------
#

PLACE E:AGENT    MAPS VAR_AGENT    EVENT

PLACE E:POWER_DOWN_OP MAPS VAR_POWER_DOWN_OP EVENT

PLACE E:START_OP MAPS VAR_START_OP EVENT
PLACE E:STOP_OP  MAPS VAR_STOP_OP  EVENT
PLACE E:OPEN_OP  MAPS VAR_OPEN_OP  EVENT
PLACE E:CLOSE_OP MAPS VAR_CLOSE_OP EVENT
PLACE E:INIT_OP  MAPS VAR_INIT_OP  EVENT
PLACE E:FINAL_OP MAPS VAR_FINAL_OP EVENT
PLACE E:SAFE_OP  MAPS VAR_SAFE_OP  EVENT

PLACE E:INT MAPS VAR_INTERRUPT EVENT

#
#--------------------------------------------------------------------
# Other Places. (for test purposes only).
#--------------------------------------------------------------------
#

# Delay places.
PLACE X_DELAY
PLACE Y_DELAY
PLACE Z_DELAY

# Single firing place
PLACE TEST:FIRE MAPS VAR_TEST_EV    EVENT

# Clamped test state.
PLACE TEST:HOLD MAPS VAR_TEST_FIXED CLAMPED

#
#--------------------------------------------------------------------
# User trigger levels, to prevent accidental startup
#--------------------------------------------------------------------
#
PLACE TRIG:HOLD MAPS VAR_USER_TRIG EVENT

#
#--------------------------------------------------------------------
# General Transition Definitions with output firing. 
#--------------------------------------------------------------------
#
# TRANS <Trans> <Action> MARKS (<Place_1> [, <Place_2>,..<Place_N>])
#
#--------------------------------------------------------------------
# Transition Firing Conditions.
#--------------------------------------------------------------------
#
# ENABLE <Trans> WHEN <Var> [ (IS | NOT) [<Int_Val> | SET | CLEAR ] ]
# 
#--------------------------------------------------------------------
#



#-----------------------
# From ENG (0).
#-----------------------
TRANS T0:1 SWITCH_MODE_AUTO MARKS INIT
 ENABLE T0:1 WHEN ENG IS SET
 ENABLE T0:1 WHEN C:IMODE IS INIT_AUTO


# ----------------------------
# TEMP To test event delays.
#
# ***** REMOVED T0:1 *****
#
# ----------------------------
#TRANS TEST:1 EVENT:TEST_01+30 MARKS X_DELAY 
# ENABLE TEST:1 WHEN ENG IS SET

#TRANS TEST:2 NULL MARKS ENG
# ENABLE TEST:2 WHEN X_DELAY IS SET
 
#-----------------------
# From INIT (1).
#-----------------------
TRANS T1:1 NULL MARKS STANDBY_DAY_OPS 
 ENABLE T1:1 WHEN INIT IS SET
 ENABLE T1:1 WHEN C:INTENT IS OP_DAY

TRANS T1:2 NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T1:2 WHEN INIT IS SET
 ENABLE T1:2 WHEN C:INTENT IS OP_NIGHT

#-----------------------
# INIT Level Loop Startup sequence
# (For manual startup test option: 
#  Assuming we start in INIT_HOLD_1)
# We should have to keep on
#  sending TRIG1 from GUI to work
#-----------------------
#TRANS TH:1 NULL MARKS SMT2
# ENABLE TH:1 WHEN SMT1 IS SET
# ENABLE TH:1 WHEN TRIG:HOLD IS TRIG_1

#TRANS TH:2 NULL MARKS SMT3
#ENABLE TH:2 WHEN SMT2 IS SET
#ENABLE TH:2 WHEN TRIG:HOLD IS TRIG_1

#TRANS TH:3 NULL MARKS SMT1
# ENABLE TH:3 WHEN SMT3 IS SET
# ENABLE TH:3 WHEN TRIG:HOLD IS TRIG_1


#-----------------------
# From STBY_DAY_OPS (2).
#-----------------------
TRANS T2:1 NULL MARKS DONE_CLOSE
 ENABLE T2:1 WHEN STANDBY_DAY_OPS IS SET
 ENABLE T2:1 WHEN C:ENCLOSURE IS ENC_CLOSED

TRANS T2:2 NULL MARKS READY_CLOSE
 ENABLE T2:2 WHEN STANDBY_DAY_OPS IS SET
 ENABLE T2:2 WHEN C:ENCLOSURE IS ENC_OPEN

TRANS T2:3 NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T2:3 WHEN STANDBY_DAY_OPS IS SET
 ENABLE T2:3 WHEN C:INTENT IS OP_NIGHT

#-----------------------
# From STANDBY_NIGHT_OPS (3).
#-----------------------
TRANS T3:1 NULL MARKS DONE_START
 ENABLE T3:1 WHEN STANDBY_NIGHT_OPS IS SET
 ENABLE T3:1 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T3:1 WHEN C:IMODE IS INIT_AUTO

TRANS T3:2 NULL MARKS READY_START
 ENABLE T3:2 WHEN STANDBY_NIGHT_OPS IS SET
 ENABLE T3:2 WHEN C:SYSTEM IS SYS_STANDBY
 ENABLE T3:2 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T3:2 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T3:2 WHEN C:IMODE IS INIT_AUTO

TRANS T3:3 FINAL MARKS TRANS_FINAL
 ENABLE T3:3 WHEN STANDBY_NIGHT_OPS IS SET
 ENABLE T3:3 WHEN C:INTENT IS OP_DAY
 ENABLE T3:3 WHEN C:IMODE IS INIT_AUTO

TRANS T3ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T3ENG WHEN STANDBY_NIGHT_OPS IS SET
 ENABLE T3ENG WHEN C:IMODE IS INIT_ENG 

#-----------------------
# From READY_CLOSE (4).
#-----------------------
TRANS T4:1 NULL MARKS DONE_CLOSE
 ENABLE T4:1 WHEN READY_CLOSE IS SET
 ENABLE T4:1 WHEN C:ENCLOSURE IS ENC_CLOSED

TRANS T4:2 CLOSE MARKS TRANS_CLOSING
 ENABLE T4:2 WHEN READY_CLOSE IS SET
 ENABLE T4:2 WHEN C:ENCLOSURE IS ENC_OPEN
 ENABLE T4:2 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T4:2 WHEN C:CONTROL IS CTRL_ENABLED

TRANS T4:3 NULL MARKS STANDBY_NIGHT_OPS
 # Abandon this op if night and no threats.
 ENABLE T4:3 WHEN READY_CLOSE IS SET
 ENABLE T4:3 WHEN C:INTENT IS OP_NIGHT
 ENABLE T4:3 WHEN C:THREAT IS CLEAR

#-----------------------
# From TRANS_CLOSING (5).
#-----------------------
TRANS T5:1 NULL MARKS DONE_CLOSE
 ENABLE T5:1 WHEN TRANS_CLOSING IS SET
 ENABLE T5:1 WHEN C:ENCLOSURE IS ENC_CLOSED

TRANS T5:2 ABORT_CLOSE MARKS STANDBY_NIGHT_OPS
 ENABLE T5:2 WHEN TRANS_CLOSING IS SET
 ENABLE T5:2 WHEN C:INTENT IS OP_NIGHT
 ENABLE T5:2 WHEN C:THREAT IS CLEAR

#
# Temporarily removed - the TCS SIM does tend to fail quite a lot here
#
#TRANS T5:3 NULL MARKS READY_CLOSE
 # Try to re-run only if the close_op fails.
 #ENABLE T5:3 WHEN TRANS_CLOSING IS SET
 #ENABLE T5:3 WHEN E:CLOSE_OP IS FAILED

#
# JUST ASSUME IT WORKED FOR NOW AND GIVE UP....
#
TRANS T5:3A NULL MARKS DONE_CLOSE
 ENABLE T5:3A WHEN TRANS_CLOSING IS SET
 ENABLE T5:3A WHEN E:CLOSE_OP IS FAILED

#-----------------------
# From DONE_CLOSE (6).
#-----------------------
TRANS T6:1 NULL MARKS READY_STOP
 ENABLE T6:1 WHEN DONE_CLOSE IS SET
 ENABLE T6:1 WHEN C:INTENT IS OP_DAY

TRANS T6:2 NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T6:2 WHEN DONE_CLOSE IS SET
 ENABLE T6:2 WHEN C:INTENT IS OP_NIGHT

#-----------------------
# From READY_STOP (7).
#-----------------------
TRANS T7:1 NULL MARKS DONE_STOP
 ENABLE T7:1 WHEN READY_STOP IS SET
 ENABLE T7:1 WHEN C:SYSTEM IS SYS_SUSPEND

TRANS T7:2 NULL MARKS DONE_STOP
 ENABLE T7:2 WHEN READY_STOP IS SET
 ENABLE T7:2 WHEN C:SYSTEM IS SYS_STANDBY

TRANS T7:3 STOP MARKS TRANS_STOPPING
 ENABLE T7:3 WHEN READY_STOP IS SET
 ENABLE T7:3 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T7:3 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T7:3 WHEN C:CONTROL IS CTRL_ENABLED

TRANS T7:4 STOP MARKS TRANS_STOPPING
 ENABLE T7:4 WHEN READY_STOP IS SET
 ENABLE T7:4 WHEN C:SYSTEM IS SYS_WARN
 ENABLE T7:4 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T7:4 WHEN C:CONTROL IS CTRL_ENABLED

TRANS T7:5 NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T7:5 WHEN READY_STOP IS SET
 ENABLE T7:5 WHEN C:INTENT IS OP_NIGHT

#-----------------------
# From TRANS_STOP (8).
#-----------------------
TRANS T8:1 NULL MARKS DONE_STOP
 ENABLE T8:1 WHEN TRANS_STOPPING IS SET
 ENABLE T8:1 WHEN C:SYSTEM IS SYS_SUSPEND

TRANS T8:2 NULL MARKS DONE_STOP
 ENABLE T8:2 WHEN TRANS_STOPPING IS SET
 ENABLE T8:2 WHEN C:SYSTEM IS SYS_STANDBY

TRANS T8:3 ABORT_STOP MARKS STANDBY_NIGHT_OPS
 ENABLE T8:3 WHEN TRANS_STOPPING IS SET
 ENABLE T8:3 WHEN C:INTENT IS OP_NIGHT 

#
# TEMP DONT TRY AGAIN JUST ASUME IT WORKED FOR NOW
#
#TRANS T8:4 NULL MARKS READY_STOP
 # Try to re-run only if the stop_op fails.
 #ENABLE T8:4 WHEN TRANS_STOPPING IS SET
 #ENABLE T8:4 WHEN E:STOP_OP IS FAILED

TRANS T8:4A NULL MARKS DONE_STOP
 # Try to re-run only if the stop_op fails.
 ENABLE T8:4A WHEN TRANS_STOPPING IS SET
 ENABLE T8:4A WHEN E:STOP_OP IS FAILED



#-----------------------
# From DONE_STOP (9).
#-----------------------
TRANS T9:1 NULL MARKS INIT_DAY_OPS
 ENABLE T9:1 WHEN DONE_STOP IS SET
 ENABLE T9:1 WHEN C:INTENT IS OP_DAY

TRANS T9:2 NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T9:2 WHEN DONE_STOP IS SET
 ENABLE T9:2 WHEN C:INTENT IS OP_NIGHT

#-----------------------
# From INIT_DAY_OPS (10).
#-----------------------
TRANS T10:1 NULL MARKS RUNNING_DAY_OPS
 ENABLE T10:1 WHEN INIT_DAY_OPS IS SET
 ENABLE T10:1 WHEN C:POWER IS PWR_OKAY

#-----------------------
# From RUNNING_DAY_OPS (11 and 12).
#-----------------------
#TRANS T11:1 JOB_REQ MARKS RUNNING_DAY_OPS
 # Job request on startup or MCA Task completion.
 #ENABLE T11:1 WHEN RUNNING_DAY_OPS IS SET
 #ENABLE T11:1 WHEN E:AGENT IS AGENT_YIELD

#TRANS T11:2 SWAP_DAY MARKS RUNNING_DAY_OPS
 # MCA Swap on yield after Task completion.
 #ENABLE T11:2 WHEN RUNNING_DAY_OPS IS SET
 #ENABLE T11:2 WHEN E:AGENT IS AGENT_ABORTED

TRANS T11:3 NULL MARKS INIT
 # Abort on change of Intention.
 ENABLE T11:3 WHEN RUNNING_DAY_OPS IS SET
 ENABLE T11:3 WHEN C:INTENT IS OP_NIGHT

#TRANS T11:4 ABORT_MODAL MARKS POWER_DOWN
 # Abort on PowerDown.
 #ENABLE T11:4 WHEN RUNNING_DAY_OPS IS SET
 #ENABLE T11:4 WHEN POWER_DOWN IS SET

#TRANS T11:5 NULL MARKS INIT
 # Abort completed, chose mode on Intention.
 #ENABLE T11:5 WHEN ABORTING_DAY_OPS IS SET
 #ENABLE T11:5 WHEN E:AGENT IS AGENT_ABORTED

TRANS T11:ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T11:ENG WHEN RUNNING_DAY_OPS IS SET
 ENABLE T11:ENG WHEN C:IMODE IS INIT_ENG




#-----------------------
# From READY_START (13).
#-----------------------
#
# DONT ASSUME ITS OK FOR NOW !!!!!
#
#TRANS T13:2 NULL MARKS DONE_START
 #ENABLE T13:2 WHEN READY_START IS SET
 #ENABLE T13:2 WHEN C:SYSTEM IS SYS_OKAY

# 
# HANDLE DODGY STATE FLICKER HERE -- ALWAYS DO OPER ON !!!!!
# WE DONT BELIEVE ITS OKAY  !!!!!
#TRANS T13:3A START MARKS TRANS_STARTING
 #ENABLE T13:3A WHEN READY_START IS SET
 #ENABLE T13:3A WHEN C:SYSTEM IS SYS_OKAY
 #ENABLE T13:3A WHEN C:NETWORK IS NETW_OKAY
 #ENABLE T13:3A WHEN C:CONTROL IS CTRL_ENABLED


TRANS T13:3 START MARKS TRANS_STARTING
 ENABLE T13:3 WHEN READY_START IS SET
 ENABLE T13:3 WHEN C:SYSTEM IS SYS_STANDBY
 ENABLE T13:3 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T13:3 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T13:3 WHEN C:IMODE IS INIT_AUTO

TRANS T13ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T13ENG WHEN READY_START IS SET
 ENABLE T13ENG WHEN C:IMODE IS INIT_ENG 


#-----------------------
# From TRANS_STARTING (14).
#-----------------------

# OK if start done and sys-okay
TRANS T14:2 NULL MARKS DONE_START
 ENABLE T14:2 WHEN TRANS_STARTING IS SET
 ENABLE T14:2 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T14:2 WHEN E:START_OP IS DONE
 ENABLE T14:2 WHEN C:IMPAIR IS CLEAR
 ENABLE T14:2 WHEN C:IMODE IS INIT_AUTO

# OK if start fails but sys-okay
TRANS T14:2b NULL MARKS DONE_START
 ENABLE T14:2b WHEN TRANS_STARTING IS SET
 ENABLE T14:2b WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T14:2b WHEN E:START_OP IS FAILED
 ENABLE T14:2b WHEN C:IMPAIR IS CLEAR
 ENABLE T14:2b WHEN C:IMODE IS INIT_AUTO

#These 2 are for when the OP ON completes (OK or FAIL)
# but system is still homing or the likes. The token
# will just sit in STBY_NIGHT until enough time has
# elapsed for the slow sys filter to switch to OKAY
# or STBY when these states are eventually acheived.

# This is a testing transition. 
TRANS T14:SUa NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T14:SUa WHEN TRANS_STARTING IS SET
 ENABLE T14:SUa WHEN C:SYSTEM IS SYS_SUSPEND
 ENABLE T14:SUa WHEN E:START_OP IS DONE
 ENABLE T14:SUa WHEN C:IMODE IS INIT_AUTO

# This is a testing transition. 
TRANS T14:SUb NULL MARKS STANDBY_NIGHT_OPS                                                               
 ENABLE T14:SUb WHEN TRANS_STARTING IS SET
 ENABLE T14:SUb WHEN C:SYSTEM IS SYS_SUSPEND
 ENABLE T14:SUb WHEN E:START_OP IS FAILED
 ENABLE T14:SUb WHEN C:IMODE IS INIT_AUTO

# These 2 match the 2 above - the axes may still be homing
# or the likes and state has gone to STBY - the MCP will
# hopefully still be in control and we will escape from
# STBY_NIGHT when control is released - If the MCP has in
# fact released control at this stage we are more or less
# commmitted to an other OPER ON ! The slow filter really
# needs to be slow enough to let the MCP finish what it is
# doing before we spot SYS_STBY .

# Handle a MCP switch to STANDBY.
TRANS T14:STa NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T14:STa WHEN TRANS_STARTING IS SET
 ENABLE T14:STa WHEN C:SYSTEM IS SYS_STANDBY
 ENABLE T14:STa WHEN E:START_OP IS DONE
 ENABLE T14:STa WHEN C:IMODE IS INIT_AUTO

# Handle a MCP switch to STANDBY.
TRANS T14:STb NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T14:STb WHEN TRANS_STARTING IS SET
 ENABLE T14:STb WHEN C:SYSTEM IS SYS_STANDBY
 ENABLE T14:STb WHEN E:START_OP IS FAILED
 ENABLE T14:STb WHEN C:IMODE IS INIT_AUTO

# These are just standard escapes which flow back onto the
# daytime firing sequence or to ENG.

TRANS T14:3 ABORT_START MARKS STANDBY_DAY_OPS
 ENABLE T14:3 WHEN TRANS_STARTING IS SET
 ENABLE T14:3 WHEN C:INTENT IS OP_DAY

TRANS T14:5 SWITCH_MODE_ENG MARKS ENG
 ENABLE T14:5 WHEN TRANS_STARTING IS SET
 ENABLE T14:5 WHEN C:IMODE IS INIT_ENG 

#-----------------------
# From DONE_START (15).
#-----------------------
TRANS T15:1 NULL MARKS READY_OPEN
 ENABLE T15:1 WHEN DONE_START IS SET
 ENABLE T15:1 WHEN C:INTENT IS OP_NIGHT
 ENABLE T15:1 WHEN C:PERIOD IS NIGHT_TIME
 ENABLE T15:1 WHEN C:IMODE IS INIT_AUTO

TRANS T15:2 NULL MARKS STANDBY_DAY_OPS
 ENABLE T15:2 WHEN DONE_START IS SET
 ENABLE T15:2 WHEN C:INTENT IS OP_DAY

#-----------------------
# From READY_OPEN (16).
#-----------------------
TRANS T16:1 NULL MARKS DONE_OPEN
 ENABLE T16:1 WHEN READY_OPEN IS SET
 ENABLE T16:1 WHEN C:ENCLOSURE IS ENC_OPEN
 ENABLE T16:1 WHEN C:THREAT IS CLEAR


TRANS T16:2 OPEN MARKS TRANS_OPENING
 ENABLE T16:2 WHEN READY_OPEN IS SET
 ENABLE T16:2 WHEN C:ENCLOSURE IS ENC_CLOSED
 ENABLE T16:2 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T16:2 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T16:2 WHEN C:THREAT IS CLEAR
 ENABLE T16:2 WHEN C:IMODE IS INIT_AUTO


TRANS T16:3 NULL MARKS STANDBY_DAY_OPS
 ENABLE T16:3 WHEN READY_OPEN IS SET
 ENABLE T16:3 WHEN C:INTENT IS OP_DAY

TRANS T16ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T16ENG WHEN READY_OPEN IS SET
 ENABLE T16ENG WHEN STANDBY_DAY_OPS IS SET
 ENABLE T16ENG WHEN C:IMODE IS INIT_ENG 

TRANS T16:4 NULL MARKS READY_CLOSE
 ENABLE T16:4 WHEN READY_OPEN IS SET
 ENABLE T16:4 WHEN C:THREAT IS ALERT

#-----------------------
# From TRANS_OPENING (17).
#-----------------------
TRANS T17:1 NULL MARKS DONE_OPEN
 ENABLE T17:1 WHEN TRANS_OPENING IS SET
 ENABLE T17:1 WHEN C:ENCLOSURE IS ENC_OPEN
 ENABLE T17:1 WHEN C:IMODE IS INIT_AUTO

TRANS T17:2 ABORT_OPEN MARKS STANDBY_DAY_OPS
 ENABLE T17:2 WHEN TRANS_OPENING IS SET
 ENABLE T17:2 WHEN C:INTENT IS OP_DAY

TRANS T17:3 ABORT_OPEN MARKS READY_CLOSE
 ENABLE T17:3 WHEN TRANS_OPENING IS SET
 ENABLE T17:3 WHEN C:INTENT IS OP_NIGHT
 ENABLE T17:3 WHEN C:THREAT IS ALERT

# This next set (3) are a temporary fix - they should be
# replaced by a better mechanism for aborting an OPEN
# under various condition transitions to 'bad' states.

# 1 Handle a system suspend during opening
TRANS T17:SYS NULL MARKS INIT
 ENABLE T17:SYS WHEN TRANS_OPENING IS SET
 ENABLE T17:SYS WHEN C:SYSTEM IS SYS_SUSPEND

# 2 Handle a Control disable during opening
TRANS T17:CTRL NULL MARKS INIT
 ENABLE T17:CTRL WHEN TRANS_OPENING IS SET
 ENABLE T17:CTRL WHEN C:CONTROL IS CTRL_DISABLED

# 3 Handle a weather alert during opening
TRANS T17:THT NULL MARKS INIT
 ENABLE T17:THT WHEN TRANS_OPENING IS SET
 ENABLE T17:THT WHEN C:THREAT IS ALERT


#TRANS T17:4 NULL MARKS READY_OPEN
 # Try to re-run only if the open_op fails.
 #ENABLE T17:4 WHEN TRANS_OPENING IS SET
 #ENABLE T17:4 WHEN E:OPEN_OP IS FAILED

TRANS T17ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T17ENG WHEN READY_OPEN IS SET
 ENABLE T17ENG WHEN C:IMODE IS INIT_ENG 

#-----------------------
# From DONE_OPEN (18).
#-----------------------
TRANS T18:1 INIT MARKS TRANS_INIT
 ENABLE T18:1 WHEN DONE_OPEN IS SET
 ENABLE T18:1 WHEN C:INTENT IS OP_NIGHT
 ENABLE T18:1 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T18:1 WHEN C:IMODE  IS INIT_AUTO
 ENABLE T18:1 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T18:1 WHEN C:THREAT  IS CLEAR
 
TRANS T18:2 NULL MARKS STANDBY_DAY_OPS
 ENABLE T18:2 WHEN DONE_OPEN IS SET
 ENABLE T18:2 WHEN C:INTENT IS OP_DAY

TRANS T18b:3 NULL MARKS INIT
 ENABLE T18b:3 WHEN DONE_OPEN IS SET
 ENABLE T18b:3 WHEN C:SYSTEM IS SYS_SUSPEND

TRANS T18ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T18ENG WHEN DONE_OPEN IS SET
 ENABLE T18ENG WHEN C:IMODE IS INIT_ENG 


#-----------------------
# From TRANS_INIT (18B)
#-----------------------
TRANS T18B:1 NULL MARKS INHIB_OPS
 ENABLE T18B:1 WHEN TRANS_INIT IS SET
 ENABLE T18B:1 WHEN C:INTENT IS OP_NIGHT
 ENABLE T18B:1 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T18B:1 WHEN C:IMODE  IS INIT_AUTO
 ENABLE T18B:1 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T18B:1 WHEN E:INIT_OP IS DONE
 #ENABLE T18B:1 WHEN TRIG:HOLD IS TRIG_1

TRANS T18B:2 NULL MARKS INHIB_OPS
 ENABLE T18B:2 WHEN TRANS_INIT IS SET
 ENABLE T18B:2 WHEN C:INTENT IS OP_NIGHT
 ENABLE T18B:2 WHEN C:SYSTEM IS SYS_OKAY
 ENABLE T18B:2 WHEN C:IMODE  IS INIT_AUTO
 ENABLE T18B:2 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T18B:2 WHEN E:INIT_OP IS FAILED
 #ENABLE T18B:2 WHEN TRIG:HOLD IS TRIG_1

TRANS T18B:3 NULL MARKS INIT 
 ENABLE T18B:3 WHEN TRANS_INIT IS SET
 ENABLE T18B:3 WHEN C:SYSTEM IS SYS_SUSPEND

TRANS T18BENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T18BENG WHEN TRANS_INIT IS SET
 ENABLE T18BENG WHEN C:IMODE IS INIT_ENG

#-----------------------
# From INHIB_OPS (19).
#-----------------------
TRANS T19:1 NULL MARKS ENABLED_NIGHT_OPS
 ENABLE T19:1 WHEN INHIB_OPS IS SET
 ENABLE T19:1 WHEN C:NETWORK IS NETW_OKAY
 ENABLE T19:1 WHEN C:CONTROL IS CTRL_ENABLED
 ENABLE T19:1 WHEN C:THREAT  IS CLEAR
 ENABLE T19:1 WHEN C:IMPAIR  IS CLEAR
 ENABLE T19:1 WHEN C:POWER   IS PWR_OKAY
 ENABLE T19:1 WHEN C:IMODE   IS INIT_AUTO
 ENABLE T19:1 WHEN C:INTENT IS OP_NIGHT

# Comment out the following line to remove ENG HOLDING dependency.
 ENABLE T19:1 WHEN C:ENGINEER IS ENG_RELEASED

# *** Uncomment the following line to enable Engineering HOLDING state
# *** The RCS will then 'stick' in INHIB_OPS until it is released using the RCS_GUI.

 #ENABLE T19:1 WHEN TRIG:HOLD IS TRIG_1


TRANS T19:2 FINAL MARKS TRANS_FINAL
 ENABLE T19:2 WHEN INHIB_OPS IS SET
 ENABLE T19:2 WHEN C:INTENT IS OP_DAY

TRANS T19:3 NULL MARKS READY_CLOSE
 ENABLE T19:3 WHEN INHIB_OPS IS SET
 ENABLE T19:3 WHEN C:THREAT IS ALERT

TRANS T19:4 SWITCH_MODE_ENG MARKS ENG
 ENABLE T19:4 WHEN INHIB_OPS IS SET
 ENABLE T19:4 WHEN C:IMODE IS INIT_ENG

# If MCP has suspended at prior stage we need to go back to INIT
# as the enclosure will be closed etc.
TRANS T19:5 NULL MARKS INIT
 ENABLE T19:5 WHEN INHIB_OPS IS SET
 ENABLE T19:5 WHEN C:IMODE IS INIT_AUTO
 ENABLE T19:5 WHEN C:SYSTEM IS SYS_SUSPEND

# Escape to restart if we loose homing etc
TRANS T19:STBY NULL MARKS STANDBY_NIGHT_OPS
 ENABLE T19:STBY WHEN INHIB_OPS IS SET
 ENABLE T19:STBY WHEN C:SYSTEM IS SYS_STANDBY

#-----------------------
# From ENABLED_NIGHT_OPS (20).
#-----------------------
TRANS T20:1 NULL MARKS INHIB_OPS
 ENABLE T20:1 WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20:1 WHEN C:CONTROL IS CTRL_DISABLED

TRANS T20:2 NULL MARKS INHIB_OPS
 ENABLE T20:2 WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20:2 WHEN C:NETWORK IS NETW_INHIBIT

TRANS T20:3 NULL MARKS INIT_OPS
 ENABLE T20:3 WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20:3 WHEN C:SYSTEM IS SYS_OKAY
 #ENABLE T20:3 WHEN C:ENGINEER IS ENG_RELEASED

TRANS T20:4 NULL MARKS INIT_OPS
 ENABLE T20:4 WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20:4 WHEN C:SYSTEM IS SYS_WARN
# ENABLE T20:4 WHEN C:ENGINEER IS ENG_RELEASED

TRANS T20:5 NULL MARKS INHIB_OPS
 ENABLE T20:5 WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20:5 WHEN C:SYSTEM IS SYS_SUSPEND

TRANS T20ENG SWITCH_MODE_ENG MARKS ENG
 ENABLE T20ENG WHEN ENABLED_NIGHT_OPS IS SET
 ENABLE T20ENG WHEN C:IMODE IS INIT_ENG 

#-----------------------
# From INIT_OPS (21).
#-----------------------
TRANS T21:1 INIT_OPS MARKS RUNNING_NIGHT_OPS
 ENABLE T21:1 WHEN INIT_OPS IS SET
 
#-----------------------
# From RUNNING_NIGHT_OPS (22).
#-----------------------
TRANS T22:1 JOB_REQ MARKS RUNNING_NIGHT_OPS
 # Job request on startup or MCA Task completion.
 ENABLE T22:1 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:1 WHEN E:AGENT IS AGENT_YIELD
 ENABLE T22:1 WHEN C:ENGINEER IS ENG_RELEASED

TRANS T22:EH ABORT_MODAL:eng_hold MARKS ABORTING_NIGHT_OPS
 ENABLE T22:EH WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:EH WHEN E:AGENT IS AGENT_YIELD
 ENABLE T22:EH WHEN C:ENGINEER IS ENG_HOLDING


TRANS T22:2 SWAP MARKS RUNNING_NIGHT_OPS
 # MCA Swap on yield after Task completion.
 ENABLE T22:2 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:2 WHEN E:AGENT IS AGENT_ABORTED

TRANS T22:3 ABORT_MODAL:daytime MARKS ABORTING_NIGHT_OPS
 # Abort on change of C:INTENT.
 ENABLE T22:3 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:3 WHEN C:INTENT IS OP_DAY

TRANS T22:4 ABORT_MODAL:power_down MARKS POWER_DOWN
 # Abort on PowerDown.
 ENABLE T22:4 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:4 WHEN POWER_DOWN IS SET

# T22:5 transferred to section (23).

TRANS T22:6 ABORT_MODAL:impairment MARKS ABORTING_NIGHT_OPS
 ENABLE T22:6 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:6 WHEN C:IMPAIR IS ALERT

TRANS T22:7 ABORT_MODAL:threat MARKS ABORTING_NIGHT_OPS
 ENABLE T22:7 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:7 WHEN C:THREAT IS ALERT

TRANS T22:8 ABORT_MODAL:network_inhibit MARKS ABORTING_NIGHT_OPS
 ENABLE T22:8 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:8 WHEN C:NETWORK IS NETW_INHIBIT

TRANS T22:9 ABORT_MODAL:ctrl_disabled MARKS ABORTING_NIGHT_OPS
 ENABLE T22:9 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:9 WHEN C:CONTROL IS CTRL_DISABLED

#
# Handles any sort of MCP suspension of operations our sensors have not spotted.
# - RCS Sensors/monitors can have different trigger levels to MCP.
#
TRANS T22:10 ABORT_MODAL:mcp_suspend MARKS ABORTING_NIGHT_OPS
 ENABLE T22:10 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE T22:10 WHEN C:SYSTEM IS SYS_SUSPEND

# New to cover the operator mode switch to Engineering.
TRANS T22:11 ABORT_MODAL:eng_request MARKS ABORTING_NIGHT_OPS
 ENABLE  T22:11 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE  T22:11 WHEN C:IMODE IS INIT_ENG

# New to handle Engineer abort to INHIB_OPS
#TRANS T22:EHOLD ABORT_MODAL:eng_hold MARKS ABORTING_NIGHT_OPS
 #ENABLE T22:EHOLD WHEN RUNNING_NIGHT_OPS IS SET
 #ENABLE T22:EHOLD WHEN C:ENGINEER IS ENG_HOLDING


# New to cover the operator/agent pre-empt.
TRANS T22:12 ABORT_MODAL:preempt MARKS  PREEMPT
 ENABLE  T22:12 WHEN RUNNING_NIGHT_OPS IS SET
 ENABLE  T22:12 WHEN E:INT IS INTERRUPTED
    
# Handle Unexpected enclosure closing while sys is ok
TRANS T22:ENCLO ABORT_MODAL:enc_closed MARKS SUDDEN_CLOSE
 ENABLE   T22:ENCLO WHEN RUNNING_NIGHT_OPS IS SET                                             
 ENABLE   T22:ENCLO WHEN C:ENCLOSURE IS ENC_CLOSED
 ENABLE   T22:ENCLO WHEN C:SYSTEM IS SYS_OKAY


# ---------------------------------------------
# From PREEMPT as a result of preempt from RNO.
# ---------------------------------------------
#TRANS TPX:1 NULL MARKS ENABLED_NIGHT_OPS
TRANS TPX:1 EVENT:priority_trigger+30 MARKS ENABLED_NIGHT_OPS
 ENABLE TPX:1 WHEN PREEMPT IS SET
 ENABLE TPX:1 WHEN E:AGENT IS AGENT_ABORTED

#-----------------------
# From ABORTING_NIGHT_OPS (23).
#-----------------------
TRANS T23:1 MAKE_SAFE MARKS TRANS_SAFE
 # We always go INHIB_NIGHT (via Safeing) on completion of abort 
 # to decide the next step even though it loses some 
 # parallelism due to the wait.
 ENABLE T23:1 WHEN ABORTING_NIGHT_OPS IS SET
 ENABLE T23:1 WHEN E:AGENT IS AGENT_ABORTED
 ENABLE T23:1 WHEN C:IMODE IS INIT_AUTO
 ENABLE T23:1 WHEN C:ENGINEER IS ENG_RELEASED
 ENABLE T23:1 WHEN C:INTENT IS OP_NIGHT

TRANS T23:2 FINAL MARKS TRANS_FINAL
 ENABLE T23:2 WHEN  ABORTING_NIGHT_OPS IS SET
 ENABLE T23:2 WHEN E:AGENT IS AGENT_ABORTED
 ENABLE T23:2 WHEN C:IMODE IS INIT_AUTO
 ENABLE T23:2 WHEN C:ENGINEER IS ENG_RELEASED
 ENABLE T23:2 WHEN C:INTENT IS OP_DAY

# Handles ENG request from running ops
TRANS T23:4 SWITCH_MODE_ENG MARKS ENG
 ENABLE  T23:4 WHEN ABORTING_NIGHT_OPS IS SET
 ENABLE  T23:4 WHEN E:AGENT IS AGENT_ABORTED
 ENABLE  T23:4 WHEN C:IMODE IS INIT_ENG

# Handles ENG_HOLD request from running ops
TRANS T23:5 NULL  MARKS INHIB_OPS
 ENABLE  T23:5 WHEN ABORTING_NIGHT_OPS IS SET
 ENABLE  T23:5 WHEN E:AGENT IS AGENT_ABORTED
 ENABLE  T23:5 WHEN C:ENGINEER IS ENG_HOLDING
 ENABLE  T23:5 WHEN C:INTENT IS OP_NIGHT

#--------------------------------------
# From TRANS_SAFE (Safeing the scope).
#
# Note: There is a problem when the TCS dies
# and comes back - the TCS 'may' not know about instrument
# and AG selection and focus may be wrong. Need to go
# thro the INITIALIZE action to ensure they are set.
# even if this was just a glitch - no easy way to tell what 
# the TCS actually knows at this point. 
#
#--------------------------------------
TRANS TSAFE:1 NULL MARKS INIT
 ENABLE TSAFE:1 WHEN TRANS_SAFE IS SET
 ENABLE TSAFE:1 WHEN E:SAFE_OP IS DONE

TRANS TSAFE:2 NULL MARKS INIT
 ENABLE TSAFE:2 WHEN TRANS_SAFE IS SET
 ENABLE TSAFE:2 WHEN E:SAFE_OP IS FAILED

#-------------------------------------
# Handles sudden enclosure closing
#-------------------------------------
TRANS T:SUDDEN EVENT:WEATHER_HOLD MARKS HOLDING
 ENABLE T:SUDDEN WHEN SUDDEN_CLOSE IS SET
 ENABLE T:SUDDEN WHEN E:AGENT IS AGENT_ABORTED


#----------------------------------------
# Escape to INIT after enclosure closing 
#  and Threat has been registered
#----------------------------------------
TRANS T:GOINIT EVENT:WEATHER_RELEASE+1800000 MARKS INIT
 ENABLE T:GOINIT WHEN HOLDING IS SET
 ENABLE T:GOINIT WHEN C:THREAT IS ALERT

# And when the weather is clear anyway
TRANS T:GOINIT2 EVENT:WEATHER_RELEASE+600000 MARKS INIT
 ENABLE T:GOINIT2 WHEN HOLDING IS SET
 ENABLE T:GOINIT2 WHEN C:THREAT IS CLEAR


#-----------------------
# From TRANS_FINAL. (2TF)
#-----------------------
TRANS T2TF:1 NULL MARKS STANDBY_DAY_OPS
 ENABLE T2TF:1 WHEN TRANS_FINAL IS SET
 ENABLE T2TF:1 WHEN E:FINAL_OP IS DONE
 ENABLE T2TF:1 WHEN C:IMODE IS INIT_AUTO

TRANS T2TF:2 NULL MARKS STANDBY_DAY_OPS
 ENABLE T2TF:2 WHEN TRANS_FINAL IS SET
 ENABLE T2TF:2 WHEN E:FINAL_OP IS FAILED
 ENABLE T2TF:2 WHEN C:IMODE IS INIT_AUTO

TRANS T2TF:ENG SWITCH_MODE_ENG MARKS ENG
  ENABLE T2TF:ENG WHEN TRANS_FINAL IS SET
  ENABLE T2TF:ENG WHEN C:IMODE IS INIT_ENG

#-----------------------
# From Anywhere (PowerDown).
#-----------------------

# PowerDown Transitions.
TRANS PX1 POWER_RESTART MARKS POWER_DOWN
 ENABLE PX1 WHEN C:POWER IS PWR_RESTART
 ENABLE PX1 WHEN SHUTDOWN_ENABLE IS SET

TRANS PX2 POWER_SHUTDOWN:px2_power_fail MARKS POWER_DOWN
 ENABLE PX2 WHEN C:POWER IS PWR_SHUTDOWN
 ENABLE PX2 WHEN SHUTDOWN_ENABLE IS SET

# Invoked by operator OP_SHUTDOWN command.
# Action: shutdown() does nothing at the moment,
#  therefore important that CA should also capture 
#  the OP_SHUTDOWN event.
#
TRANS PX3 SHUTDOWN MARKS POWER_DOWN
 ENABLE PX3 WHEN C:SHUTDOWN IS SI_SHUTDOWN
 ENABLE PX3 WHEN SHUTDOWN_ENABLE IS SET

#-----------------------
# From POWER_DOWN (?).
#-----------------------

# Dont care if the op succeeds we need to quit now.
TRANS K1 KILL:k1-power-off MARKS STOPPING
 ENABLE K1 WHEN POWER_DOWN IS SET
 ENABLE K1 WHEN E:POWER_DOWN_OP IS DONE

TRANS K2 KILL:k2-power-off MARKS STOPPING
 ENABLE K2 WHEN POWER_DOWN IS SET
 ENABLE K2 WHEN E:POWER_DOWN_OP IS FAILED

#
#-----------------------
# Initial marking.
#-----------------------
# 
# MARK <Place> [<Value>]
#
#-----------------------
#

#MARK SMT1
MARK ENG
MARK SHUTDOWN_ENABLE
